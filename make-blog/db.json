{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","path":"js/jquery-3.4.1.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","path":"css/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"source/images/geocache.png","path":"images/geocache.png","modified":0,"renderable":0},{"_id":"source/images/totallylegit_fake.png","path":"images/totallylegit_fake.png","modified":0,"renderable":0},{"_id":"source/images/IMG_UPDATE_2_AHM.jpeg","path":"images/IMG_UPDATE_2_AHM.jpeg","modified":1,"renderable":0},{"_id":"source/images/IMG_UPDATE_AHM.jpeg","path":"images/IMG_UPDATE_AHM.jpeg","modified":1,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"cd2dd99df331e7cb62fa3d350202a9f353738976","modified":1666306840205},{"_id":"source/_posts/.DS_Store","hash":"b1d5ca1a14c5939249a4c948bfe91f4240d8cc0e","modified":1638314292613},{"_id":"source/_posts/Hacker101-CTF-PostBook.md","hash":"a335fc72897ca554bd9c71ca825400245b27ad75","modified":1632643566820},{"_id":"source/_posts/Hacker101-CTF-Micro-CMS-v2.md","hash":"725de5f403f4ea3762c19566b58f16b38f7e1007","modified":1638314269469},{"_id":"source/_posts/Hacker101-CTF-Micro-CMS-v1.md","hash":"f033b9038db87df3ef9a02ae7ae5cb5f70c23646","modified":1637809442580},{"_id":"source/_posts/Generating-large-amounts-of-dummy-data-in-excel.md","hash":"8329a89f7e0c59408af0069bebb89b7ce3f80f43","modified":1646097893566},{"_id":"source/_posts/Hacker101-CTF-Y2FuIHlvdSByZWNvbj8.md","hash":"543928d8eb0e478f16aa2467edff07250ce17865","modified":1633476765710},{"_id":"source/_posts/Linux-Aliases.md","hash":"ec8308c8c57116e1d6bab9b6e035a487a1387e20","modified":1637809052581},{"_id":"source/_posts/Creating-executables-on-MacOS-from-a-bash-sh-script.md","hash":"5155a5ced998bed37eb3cf6675dc41eaeccc06ac","modified":1647832342714},{"_id":"source/_posts/Geocaching-Event-Project.md","hash":"c316e6a038149fc814531ee2969760e53b756f87","modified":1669941470391},{"_id":"source/_posts/Turns-out-the-COVID-19-vaccine-certificate-is-easily-forged.md","hash":"70f8d5cfda97b61acfe18480c4c99824cdc16e4a","modified":1669941575856},{"_id":"source/_posts/Making-a-bash-script-to-fix-a-minor-annoyance.md","hash":"94ddba41b607505adde1c8fbb8ab184b05458ae9","modified":1638315759704},{"_id":"source/_posts/hello-world.md","hash":"21e111679c8a93fb7087263648eb58fb820d8493","modified":1637808944884},{"_id":"source/_posts/Virgin-Media-revealed-to-be-storing-passwords-in-plaintext-posts-password-to-customer.md","hash":"3e110bbbb437450d6c7b547bfc15b1de6fe8e917","modified":1638315744858},{"_id":"source/images/.DS_Store","hash":"4309ddda92502beb13f19d16d35606c6f5d14b00","modified":1642139636407},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1637803606598},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1637803606208},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1637803606701},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"d2772ece6d4422ccdaa0359c3e07588834044052","modified":1637803606624},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":1637803606699},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1637803606701},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1637803606703},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1637803606702},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1637803606702},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1637803606703},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1637803606705},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1637803606704},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"9a94875cbf4c27fbe2e63da0496242addc6d2876","modified":1637803606623},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1637803606705},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1637803606706},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1637803606707},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1637803606704},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1637803606706},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1637803606708},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1637803606708},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1637803606708},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1637803606459},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1637803606500},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1637803606498},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1637803606506},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1637803606508},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1637803606481},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1637803606518},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1637803606639},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1637803606267},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":1637803606620},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"581b0cbefdaa5f894922133989dd2d3bf71ded79","modified":1637803606640},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"9c451e5efd72c5bb8b56e8c2b94be731e99db05b","modified":1637803606660},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1637803606476},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1637803606444},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1637803606511},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1637803606520},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"414914ebb159fac1922b056b905e570ac7521925","modified":1637803606348},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1637803606516},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1637803606398},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":1637803606410},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1637803606489},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1637803606491},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"c1acd247e14588cdf101a69460cb8319c18cd078","modified":1637803606494},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f215d92a882247a7cc5ea80b241bedfcec0ea6ca","modified":1637803606493},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1637803606486},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1637803606502},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"dfd555c00e85ffc4207c88968d12b219c1f086ec","modified":1637803606462},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1637803606654},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1637803606650},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1637803606643},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1637803606512},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"80759482d07063c091e940f964a1cf6693d3d406","modified":1637803606644},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1637803606645},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1637803606653},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1637803606656},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1637803606651},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1637803606646},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1637803606657},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1637803606659},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1637803606658},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1637803606484},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1637803606521},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1637803606471},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1637803606515},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1637803606504},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1637803606488},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1637803606618},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1637803606609},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1637803606696},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1637803606699},{"_id":"source/images/totallylegit_fake.png","hash":"6ff4b816cfe68eef17d8760f2fbb84894e1f8402","modified":1659848264412},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1637803606691},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1637803606635},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1637803606552},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1637803606594},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","hash":"6a0314b70fd73520b1f303e52802b1fb2c0d52e4","modified":1659848264112},{"_id":"source/images/geocache.png","hash":"0167711286e35b1f473ab31440251e938dd48119","modified":1659848264412},{"_id":"public/2022/03/21/Creating-executables-on-MacOS-from-a-bash-sh-script/index.html","hash":"5a490aedb6044aa7d86dac5c84f8b8cc00c1a2f7","modified":1669941784082},{"_id":"public/2022/03/01/Generating-large-amounts-of-dummy-data-in-excel/index.html","hash":"0e57f5ae893352639b3cea3f1f967d05a4e02824","modified":1669941784082},{"_id":"public/2021/11/26/Virgin-Media-revealed-to-be-storing-passwords-in-plaintext-posts-password-to-customer/index.html","hash":"107c9691cb94e1ed8f315e2d6008dd3636886b17","modified":1669941784082},{"_id":"public/2021/10/21/Turns-out-the-COVID-19-vaccine-certificate-is-easily-forged/index.html","hash":"bb8ed03f6d689bf2456d7e411ec82e8ddcf7197d","modified":1669941784082},{"_id":"public/2021/10/06/Hacker101-CTF-Y2FuIHlvdSByZWNvbj8/index.html","hash":"b979a7367d304136fc7a1088fd968e7d3cd68f30","modified":1669941784082},{"_id":"public/2021/09/26/Hacker101-CTF-PostBook/index.html","hash":"4fd85f66c05c1721eabc7fd4b1275b9df6064dab","modified":1669941784082},{"_id":"public/2021/09/25/Hacker101-CTF-Micro-CMS-v2/index.html","hash":"f3bd287bd7cf6a5b718d802fc704f9a4b3e96362","modified":1669941784082},{"_id":"public/2021/09/25/Hacker101-CTF-Micro-CMS-v1/index.html","hash":"d72bb7f5bf44d8efda82f2e0b1ee976cf3a1c258","modified":1669941784082},{"_id":"public/2021/09/25/Linux-Aliases/index.html","hash":"3098d8be78d52013b36eacde70f70e66f998c250","modified":1669941784082},{"_id":"public/2021/09/25/hello-world/index.html","hash":"9e1d259d3728576d246425ccbf8575a69df68f82","modified":1669941784082},{"_id":"public/archives/index.html","hash":"e12b62858303a9f4a00ac3a529e097ddfbaf87cb","modified":1669941784082},{"_id":"public/archives/2021/index.html","hash":"cdcd7fb1f811146f47b755c40b82bd262120d8fd","modified":1669941784082},{"_id":"public/archives/page/2/index.html","hash":"820789d14273c5e96ed1ceca335359b9a4861737","modified":1669941784082},{"_id":"public/archives/2021/09/index.html","hash":"60d40fb2ac510f3fa67d4fc5aa05631a84afbc1e","modified":1669941784082},{"_id":"public/archives/2021/10/index.html","hash":"56aca8f0af864d063f1075d740d869b2d9d85232","modified":1669941784082},{"_id":"public/archives/2021/11/index.html","hash":"06dcb273ddd096bfcd93542f0aea3170e0fe41d1","modified":1669941784082},{"_id":"public/archives/2022/index.html","hash":"9b0d5c4372d62fd0c9302e97fcb1c40341a9e599","modified":1669941784082},{"_id":"public/archives/2022/01/index.html","hash":"1467cfc2332559cff1285ac0ec3e2b1d1c153845","modified":1669941784082},{"_id":"public/archives/2022/03/index.html","hash":"069f9ede114bb2d9ca9b999b6204b2fa7d42f208","modified":1669941784082},{"_id":"public/categories/CTF-Writeups/index.html","hash":"6cb624d74f546a7f28d55543f52c4602e09dd845","modified":1669941784082},{"_id":"public/page/2/index.html","hash":"e78b30eddd66aae8f98f06f184fcb8149bcbe290","modified":1669941784082},{"_id":"public/tags/bash-macos-macosx/index.html","hash":"0e26c0cd2f54e1c69fd2c75f6e99db8f07ff4d03","modified":1669941784082},{"_id":"public/tags/excel-microsoft-excel-spreadsheet-data-science-data-automation-database-base/index.html","hash":"1d6828f73c2cfc7ce1b050e1b6e491ae5358cfe1","modified":1669941784082},{"_id":"public/tags/circuit-electronics/index.html","hash":"bb538947cde5c09b9077d1d2cf04e9d87d669513","modified":1669941784082},{"_id":"public/tags/bash-MacOS-Anaconda-Conda-Python-Linux/index.html","hash":"40b8ace0c9fa627e9e4917d150e4b6f825e1c948","modified":1669941784082},{"_id":"public/tags/COVID-19-coronavirus/index.html","hash":"85e5c5a4bbdae2973458d77c9be0ae732d6d9683","modified":1669941784082},{"_id":"public/2022/01/14/Geocaching-Event-Project/index.html","hash":"44cceb6a953da79299eb714ba4bbad579090a542","modified":1669941784082},{"_id":"public/2021/11/26/Making-a-bash-script-to-fix-a-minor-annoyance/index.html","hash":"3f9bdd330d3fa145b209da0c99b93a7a3ea29094","modified":1669941784082},{"_id":"public/index.html","hash":"41ef1863bcf5d0376b18d40e7b59367c38982423","modified":1669941784082},{"_id":"public/tags/security-cybersecurity-Virgin-Media-Virgin-password-plaintext-password/index.html","hash":"b2eef8c73257b061fafd2c66cb77c53d901ef4d3","modified":1669941784082},{"_id":"public/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":1669941784082},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1669941784082},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1669941784082},{"_id":"public/css/style.css","hash":"4da345d832a2682bcaee3ab3e22c15e3cd0e9cde","modified":1669941784082},{"_id":"public/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1669941784082},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1669941784082},{"_id":"public/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1669941784082},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1669941784082},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1669941784082},{"_id":"public/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1669941784082},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1669941784082},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"6a0314b70fd73520b1f303e52802b1fb2c0d52e4","modified":1669941784082},{"_id":"public/images/totallylegit_fake.png","hash":"6ff4b816cfe68eef17d8760f2fbb84894e1f8402","modified":1669941784082},{"_id":"public/images/geocache.png","hash":"0167711286e35b1f473ab31440251e938dd48119","modified":1669941784082},{"_id":"source/_posts/Cross-Platform-Scripting.md","hash":"d33731d0ebe704b687556eb9094d17e5958e3cfb","modified":1659849749244},{"_id":"source/_posts/FPGA-Holidays-Adventures.md","hash":"2cad4fe8b4b6c419831e0f52b9b676d50615c73e","modified":1659849766024},{"_id":"public/2022/07/16/Cross-Platform-Scripting/index.html","hash":"9a6bbe905c2f9e1b363419bb8e79480a47ccb69b","modified":1669941784082},{"_id":"public/archives/2022/07/index.html","hash":"5f23139ba087ff954c8452bab263f6608ce74f53","modified":1669941784082},{"_id":"public/tags/scripting-bash-powershell-cmd-cli/index.html","hash":"92ec4dd31a8ece3716cdb275f90d09e15a416a06","modified":1669941784082},{"_id":"public/tags/FPGA-programming-icelink/index.html","hash":"8c07569065f251e09e57aefad41d9144ab6e94b1","modified":1669941784082},{"_id":"public/2022/07/16/FPGA-Holidays-Adventures/index.html","hash":"f1db599d9bb278a6fd0773f3329a0dc7ce3fa4dd","modified":1669941784082},{"_id":"source/_posts/AHM-health-insurance-hacked.md","hash":"241992c6b5a9ab51646ff357884ef01ce8577abd","modified":1666307888986},{"_id":"source/images/IMG_UPDATE_AHM.jpeg","hash":"9aa8666c06e56bfd526af920a79bf2923cf223c2","modified":1669941406706},{"_id":"source/images/IMG_UPDATE_2_AHM.jpeg","hash":"e1a50f678e728b4b1be120657565ef4cc8d347a2","modified":1669941406706},{"_id":"public/2022/10/21/AHM-health-insurance-hacked/index.html","hash":"fbe018ba7437124a36c5d56d5a593be2a07b0f2d","modified":1669941784082},{"_id":"public/archives/2022/10/index.html","hash":"acbd47cc3e4ba58983fb1522ee5a416b2cf66b3f","modified":1669941784082},{"_id":"public/images/IMG_UPDATE_AHM.jpeg","hash":"9aa8666c06e56bfd526af920a79bf2923cf223c2","modified":1669941784082},{"_id":"public/images/IMG_UPDATE_2_AHM.jpeg","hash":"e1a50f678e728b4b1be120657565ef4cc8d347a2","modified":1669941784082}],"Category":[{"name":"CTF Writeups","_id":"cl6eduwj90005ookg8fchafo1"}],"Data":[],"Page":[],"Post":[{"title":"Creating executables on MacOS from a bash (.sh) script","date":"2022-03-21T02:25:34.000Z","_content":"Sometimes I have the issue of needing to make a portable, easy to use solution for executing a bash script. \nOf course I could simply do `chmod +x file.sh`, but that would require the user to go into the terminal and enter a command (goodness forbid). \nTo fix this, there exists a tool called shc. I'll be covering instructions for compiling on a mac, for macs due to that being what I most often have access to. \nTo start off, install shc with homebrew:\n`brew install shc`\nIf your cmd line complains about brew not veing a command, simple enter this first:\n```bash\nNONINTERACTIVE=1 /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n```\nThis will install the brew package manager for macos. To use it, just use the command \"brew\".\nOnce you've installed brew and shc, create your sh file:\n```bash\ntouch test.sh\n# Add content\nnano test.sh\n# make it executable\nchmod +x test.sh\n```\nAt this stage i'd suggest testing it (`sh ./test.sh`) and making sure you have a [shebang](https://www.geeksforgeeks.org/shell-scripting-define-bin-bash/) to ensure it works well portably. \nNext, generate your executable with `shc -f test.sh` (Where test.sh is your sh file)  and it will make 2 new files:\n - test.sh.x\n - test.sh.c\n The first being your new executable, the second being your C source code. \n Next I like to rename it to remove the extension (Don't worry, it will still work fine without it, as it doesn't depend on the extension) just by doing `mv test.sh.x test` and now you have your executable shell file!\n","source":"_posts/Creating-executables-on-MacOS-from-a-bash-sh-script.md","raw":"---\ntitle: Creating executables on MacOS from a bash (.sh) script\ndate: 2022-03-21 13:25:34\ntags: bash, macos, macosx\n---\nSometimes I have the issue of needing to make a portable, easy to use solution for executing a bash script. \nOf course I could simply do `chmod +x file.sh`, but that would require the user to go into the terminal and enter a command (goodness forbid). \nTo fix this, there exists a tool called shc. I'll be covering instructions for compiling on a mac, for macs due to that being what I most often have access to. \nTo start off, install shc with homebrew:\n`brew install shc`\nIf your cmd line complains about brew not veing a command, simple enter this first:\n```bash\nNONINTERACTIVE=1 /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n```\nThis will install the brew package manager for macos. To use it, just use the command \"brew\".\nOnce you've installed brew and shc, create your sh file:\n```bash\ntouch test.sh\n# Add content\nnano test.sh\n# make it executable\nchmod +x test.sh\n```\nAt this stage i'd suggest testing it (`sh ./test.sh`) and making sure you have a [shebang](https://www.geeksforgeeks.org/shell-scripting-define-bin-bash/) to ensure it works well portably. \nNext, generate your executable with `shc -f test.sh` (Where test.sh is your sh file)  and it will make 2 new files:\n - test.sh.x\n - test.sh.c\n The first being your new executable, the second being your C source code. \n Next I like to rename it to remove the extension (Don't worry, it will still work fine without it, as it doesn't depend on the extension) just by doing `mv test.sh.x test` and now you have your executable shell file!\n","slug":"Creating-executables-on-MacOS-from-a-bash-sh-script","published":1,"updated":"2022-03-21T03:12:22.714Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6eduwj00000ookgdo4w39s1","content":"<p>Sometimes I have the issue of needing to make a portable, easy to use solution for executing a bash script.<br>Of course I could simply do <code>chmod +x file.sh</code>, but that would require the user to go into the terminal and enter a command (goodness forbid).<br>To fix this, there exists a tool called shc. I’ll be covering instructions for compiling on a mac, for macs due to that being what I most often have access to.<br>To start off, install shc with homebrew:<br><code>brew install shc</code><br>If your cmd line complains about brew not veing a command, simple enter this first:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NONINTERACTIVE=1 /bin/bash -c <span class=\"string\">&quot;<span class=\"subst\">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>\n<p>This will install the brew package manager for macos. To use it, just use the command “brew”.<br>Once you’ve installed brew and shc, create your sh file:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch test.sh</span><br><span class=\"line\"><span class=\"comment\"># Add content</span></span><br><span class=\"line\">nano test.sh</span><br><span class=\"line\"><span class=\"comment\"># make it executable</span></span><br><span class=\"line\">chmod +x test.sh</span><br></pre></td></tr></table></figure>\n<p>At this stage i’d suggest testing it (<code>sh ./test.sh</code>) and making sure you have a <a href=\"https://www.geeksforgeeks.org/shell-scripting-define-bin-bash/\">shebang</a> to ensure it works well portably.<br>Next, generate your executable with <code>shc -f test.sh</code> (Where test.sh is your sh file)  and it will make 2 new files:</p>\n<ul>\n<li>test.sh.x</li>\n<li>test.sh.c<br>The first being your new executable, the second being your C source code.<br>Next I like to rename it to remove the extension (Don’t worry, it will still work fine without it, as it doesn’t depend on the extension) just by doing <code>mv test.sh.x test</code> and now you have your executable shell file!</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>Sometimes I have the issue of needing to make a portable, easy to use solution for executing a bash script.<br>Of course I could simply do <code>chmod +x file.sh</code>, but that would require the user to go into the terminal and enter a command (goodness forbid).<br>To fix this, there exists a tool called shc. I’ll be covering instructions for compiling on a mac, for macs due to that being what I most often have access to.<br>To start off, install shc with homebrew:<br><code>brew install shc</code><br>If your cmd line complains about brew not veing a command, simple enter this first:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NONINTERACTIVE=1 /bin/bash -c <span class=\"string\">&quot;<span class=\"subst\">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>\n<p>This will install the brew package manager for macos. To use it, just use the command “brew”.<br>Once you’ve installed brew and shc, create your sh file:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch test.sh</span><br><span class=\"line\"><span class=\"comment\"># Add content</span></span><br><span class=\"line\">nano test.sh</span><br><span class=\"line\"><span class=\"comment\"># make it executable</span></span><br><span class=\"line\">chmod +x test.sh</span><br></pre></td></tr></table></figure>\n<p>At this stage i’d suggest testing it (<code>sh ./test.sh</code>) and making sure you have a <a href=\"https://www.geeksforgeeks.org/shell-scripting-define-bin-bash/\">shebang</a> to ensure it works well portably.<br>Next, generate your executable with <code>shc -f test.sh</code> (Where test.sh is your sh file)  and it will make 2 new files:</p>\n<ul>\n<li>test.sh.x</li>\n<li>test.sh.c<br>The first being your new executable, the second being your C source code.<br>Next I like to rename it to remove the extension (Don’t worry, it will still work fine without it, as it doesn’t depend on the extension) just by doing <code>mv test.sh.x test</code> and now you have your executable shell file!</li>\n</ul>\n"},{"title":"Generating large amounts of 'dummy' data in excel","date":"2022-03-01T01:08:28.000Z","_content":"\n\nOften I come across the following problem when designing a database:\n\n\n\nI need to test my queries, but to do that, I need some data. Sometimes large amounts in order to properly test them.\n\n\n\nNow I ***could*** enter all of my data manually, but if I have many fields, or need a lot of diversity in my data, that will take forever. \n\n\n\nThe solution: Excel!\n\nLet's instead generate our data by using excel and excel formulas. For this demonstration, i will be using the following data dictionary:\n\n| ID            | first_name     | last_name      | called_by_first  | email          | postcode | gender | DOB  |\n| ------------- | -------------- | -------------- | ---------------- | -------------- | -------- | ------ | ---- |\n| AutoValue INT | Text [VARCHAR[ | Text [VARCHAR] | Yes/No [Boolean] | Text [VARCHAR] | Int      | Char   | Date |\n\n\n\n\nThe ID is easy, we can just use an incrementinfg number. \n\nFirst name is where it starts to get harder... To do this, I've actually made a custom webpage that generates any amount of space seporated names as you want! (Although >1000 names tends to lag your computer). \n\nThen I use the \"text to columns\" tool in excel (Under Data>Text to columns>Delimited>Tick the \"Space\" option) to seporate into the first_name and last_name fields. \n\n\n\nNext, to generate a random \"Yes/No\" answer, I used excels `=CHOOSE` formula, which, given a number, chooses between options. For example, `=CHOOSE(1, YES, NO)` would give us \"Yes\" and a 2 would give us \"No\".\n\nThis gives us our next function:`=CHOOSE(RANDBETWEEN(1,2), YES, NO)`, which randomly gives us either yes or no. \n\nNext, our email. To do this, I made a nieve approach. To do this, i simply used the concat function`=CONCAT(B2, C2, RANDBETWEEN(10, 99), \"@example.gov.au\")`\n\nWhere B2 is our first name, and C2 our last.\n\nThe postcode is very simple, as we can just use `=RANDBETWEEN(3000, 3999)` (This is the range for victorian postcodes).\n\nGender, once again, is fairly simple, and similar to the `called_by_first` solution:\n\n`=CHOOSE(RANDBETWEEN(1,3), \"M\", \"F\", \"O\")`\n\n\n\nFinally, our most challenging field (in my opinion), the date. This is difficult because base demands we must format it with padded zero's (e.g. not 3/4/2022 but 03/04/2022).\n\nFor our day, we can use the following:\n\n`=TEXT(RANDBETWEEN(1, 28), REPT(\"0\", 2))`\n\nWhich says: Join a random number with enough zero's to make it 2 digits wide.\n\nWe can repeat this for the month: `=TEXT(RANDBETWEEN(1, 12), REPT(\"0\", 2))`\n\nAnd the year is fairly simple: `=RANDBETWEEN(1900, 2012)`\n\nThen, we join all of these, making this monster of a formula:\n\n`=CONCAT(TEXT(RANDBETWEEN(1, 28), REPT(\"0\", 2)), \"/\", TEXT(RANDBETWEEN(1, 12), REPT(\"0\", 2)), \"/\", RANDBETWEEN(1900, 2012))`    \n\nNow obviously this has a few holes, such as not including > 28th day of any months, but this is perfectly fine for a bit of \"filler\" data. \n\nSo, to recap, this is our final formula set:\n\n| first_name                     | last_name        | called by first                    | email                                                    | postcode                 | Gender                                   | DOB                                                                                                                        |\n| ------------------------------ | ---------------- | ---------------------------------- | -------------------------------------------------------- | ------------------------ | ---------------------------------------- | -------------------------------------------------------------------------------------------------------------------------- |\n| generator into text to columns | Split first name | =CHOOSE(RANDBETWEEN(1,2), YES, NO) | =CONCAT(B2, C2, RANDBETWEEN(10, 99), \"@example.gov.au\")` | =RANDBETWEEN(3000, 3999) | =CHOOSE(RANDBETWEEN(1,3), \"M\", \"F\", \"O\") | =CONCAT(TEXT(RANDBETWEEN(1, 28), REPT(\"0\", 2)), \"/\", TEXT(RANDBETWEEN(1, 12), REPT(\"0\", 2)), \"/\", RANDBETWEEN(1900, 2012)) |\n\n","source":"_posts/Generating-large-amounts-of-dummy-data-in-excel.md","raw":"---\ntitle: Generating large amounts of 'dummy' data in excel\ndate: 2022-03-01 12:08:28\ntags: excel, microsoft excel, spreadsheet, data science, data, automation, database, base\n---\n\n\nOften I come across the following problem when designing a database:\n\n\n\nI need to test my queries, but to do that, I need some data. Sometimes large amounts in order to properly test them.\n\n\n\nNow I ***could*** enter all of my data manually, but if I have many fields, or need a lot of diversity in my data, that will take forever. \n\n\n\nThe solution: Excel!\n\nLet's instead generate our data by using excel and excel formulas. For this demonstration, i will be using the following data dictionary:\n\n| ID            | first_name     | last_name      | called_by_first  | email          | postcode | gender | DOB  |\n| ------------- | -------------- | -------------- | ---------------- | -------------- | -------- | ------ | ---- |\n| AutoValue INT | Text [VARCHAR[ | Text [VARCHAR] | Yes/No [Boolean] | Text [VARCHAR] | Int      | Char   | Date |\n\n\n\n\nThe ID is easy, we can just use an incrementinfg number. \n\nFirst name is where it starts to get harder... To do this, I've actually made a custom webpage that generates any amount of space seporated names as you want! (Although >1000 names tends to lag your computer). \n\nThen I use the \"text to columns\" tool in excel (Under Data>Text to columns>Delimited>Tick the \"Space\" option) to seporate into the first_name and last_name fields. \n\n\n\nNext, to generate a random \"Yes/No\" answer, I used excels `=CHOOSE` formula, which, given a number, chooses between options. For example, `=CHOOSE(1, YES, NO)` would give us \"Yes\" and a 2 would give us \"No\".\n\nThis gives us our next function:`=CHOOSE(RANDBETWEEN(1,2), YES, NO)`, which randomly gives us either yes or no. \n\nNext, our email. To do this, I made a nieve approach. To do this, i simply used the concat function`=CONCAT(B2, C2, RANDBETWEEN(10, 99), \"@example.gov.au\")`\n\nWhere B2 is our first name, and C2 our last.\n\nThe postcode is very simple, as we can just use `=RANDBETWEEN(3000, 3999)` (This is the range for victorian postcodes).\n\nGender, once again, is fairly simple, and similar to the `called_by_first` solution:\n\n`=CHOOSE(RANDBETWEEN(1,3), \"M\", \"F\", \"O\")`\n\n\n\nFinally, our most challenging field (in my opinion), the date. This is difficult because base demands we must format it with padded zero's (e.g. not 3/4/2022 but 03/04/2022).\n\nFor our day, we can use the following:\n\n`=TEXT(RANDBETWEEN(1, 28), REPT(\"0\", 2))`\n\nWhich says: Join a random number with enough zero's to make it 2 digits wide.\n\nWe can repeat this for the month: `=TEXT(RANDBETWEEN(1, 12), REPT(\"0\", 2))`\n\nAnd the year is fairly simple: `=RANDBETWEEN(1900, 2012)`\n\nThen, we join all of these, making this monster of a formula:\n\n`=CONCAT(TEXT(RANDBETWEEN(1, 28), REPT(\"0\", 2)), \"/\", TEXT(RANDBETWEEN(1, 12), REPT(\"0\", 2)), \"/\", RANDBETWEEN(1900, 2012))`    \n\nNow obviously this has a few holes, such as not including > 28th day of any months, but this is perfectly fine for a bit of \"filler\" data. \n\nSo, to recap, this is our final formula set:\n\n| first_name                     | last_name        | called by first                    | email                                                    | postcode                 | Gender                                   | DOB                                                                                                                        |\n| ------------------------------ | ---------------- | ---------------------------------- | -------------------------------------------------------- | ------------------------ | ---------------------------------------- | -------------------------------------------------------------------------------------------------------------------------- |\n| generator into text to columns | Split first name | =CHOOSE(RANDBETWEEN(1,2), YES, NO) | =CONCAT(B2, C2, RANDBETWEEN(10, 99), \"@example.gov.au\")` | =RANDBETWEEN(3000, 3999) | =CHOOSE(RANDBETWEEN(1,3), \"M\", \"F\", \"O\") | =CONCAT(TEXT(RANDBETWEEN(1, 28), REPT(\"0\", 2)), \"/\", TEXT(RANDBETWEEN(1, 12), REPT(\"0\", 2)), \"/\", RANDBETWEEN(1900, 2012)) |\n\n","slug":"Generating-large-amounts-of-dummy-data-in-excel","published":1,"updated":"2022-03-01T01:24:53.566Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6eduwj50001ookgbhs5dpp7","content":"<p>Often I come across the following problem when designing a database:</p>\n<p>I need to test my queries, but to do that, I need some data. Sometimes large amounts in order to properly test them.</p>\n<p>Now I <em><strong>could</strong></em> enter all of my data manually, but if I have many fields, or need a lot of diversity in my data, that will take forever. </p>\n<p>The solution: Excel!</p>\n<p>Let’s instead generate our data by using excel and excel formulas. For this demonstration, i will be using the following data dictionary:</p>\n<table>\n<thead>\n<tr>\n<th>ID</th>\n<th>first_name</th>\n<th>last_name</th>\n<th>called_by_first</th>\n<th>email</th>\n<th>postcode</th>\n<th>gender</th>\n<th>DOB</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>AutoValue INT</td>\n<td>Text [VARCHAR[</td>\n<td>Text [VARCHAR]</td>\n<td>Yes/No [Boolean]</td>\n<td>Text [VARCHAR]</td>\n<td>Int</td>\n<td>Char</td>\n<td>Date</td>\n</tr>\n</tbody></table>\n<p>The ID is easy, we can just use an incrementinfg number. </p>\n<p>First name is where it starts to get harder… To do this, I’ve actually made a custom webpage that generates any amount of space seporated names as you want! (Although &gt;1000 names tends to lag your computer). </p>\n<p>Then I use the “text to columns” tool in excel (Under Data&gt;Text to columns&gt;Delimited&gt;Tick the “Space” option) to seporate into the first_name and last_name fields. </p>\n<p>Next, to generate a random “Yes/No” answer, I used excels <code>=CHOOSE</code> formula, which, given a number, chooses between options. For example, <code>=CHOOSE(1, YES, NO)</code> would give us “Yes” and a 2 would give us “No”.</p>\n<p>This gives us our next function:<code>=CHOOSE(RANDBETWEEN(1,2), YES, NO)</code>, which randomly gives us either yes or no. </p>\n<p>Next, our email. To do this, I made a nieve approach. To do this, i simply used the concat function<code>=CONCAT(B2, C2, RANDBETWEEN(10, 99), &quot;@example.gov.au&quot;)</code></p>\n<p>Where B2 is our first name, and C2 our last.</p>\n<p>The postcode is very simple, as we can just use <code>=RANDBETWEEN(3000, 3999)</code> (This is the range for victorian postcodes).</p>\n<p>Gender, once again, is fairly simple, and similar to the <code>called_by_first</code> solution:</p>\n<p><code>=CHOOSE(RANDBETWEEN(1,3), &quot;M&quot;, &quot;F&quot;, &quot;O&quot;)</code></p>\n<p>Finally, our most challenging field (in my opinion), the date. This is difficult because base demands we must format it with padded zero’s (e.g. not 3/4/2022 but 03/04/2022).</p>\n<p>For our day, we can use the following:</p>\n<p><code>=TEXT(RANDBETWEEN(1, 28), REPT(&quot;0&quot;, 2))</code></p>\n<p>Which says: Join a random number with enough zero’s to make it 2 digits wide.</p>\n<p>We can repeat this for the month: <code>=TEXT(RANDBETWEEN(1, 12), REPT(&quot;0&quot;, 2))</code></p>\n<p>And the year is fairly simple: <code>=RANDBETWEEN(1900, 2012)</code></p>\n<p>Then, we join all of these, making this monster of a formula:</p>\n<p><code>=CONCAT(TEXT(RANDBETWEEN(1, 28), REPT(&quot;0&quot;, 2)), &quot;/&quot;, TEXT(RANDBETWEEN(1, 12), REPT(&quot;0&quot;, 2)), &quot;/&quot;, RANDBETWEEN(1900, 2012))</code>    </p>\n<p>Now obviously this has a few holes, such as not including &gt; 28th day of any months, but this is perfectly fine for a bit of “filler” data. </p>\n<p>So, to recap, this is our final formula set:</p>\n<table>\n<thead>\n<tr>\n<th>first_name</th>\n<th>last_name</th>\n<th>called by first</th>\n<th>email</th>\n<th>postcode</th>\n<th>Gender</th>\n<th>DOB</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>generator into text to columns</td>\n<td>Split first name</td>\n<td>=CHOOSE(RANDBETWEEN(1,2), YES, NO)</td>\n<td>=CONCAT(B2, C2, RANDBETWEEN(10, 99), “@example.gov.au”)`</td>\n<td>=RANDBETWEEN(3000, 3999)</td>\n<td>=CHOOSE(RANDBETWEEN(1,3), “M”, “F”, “O”)</td>\n<td>=CONCAT(TEXT(RANDBETWEEN(1, 28), REPT(“0”, 2)), “/“, TEXT(RANDBETWEEN(1, 12), REPT(“0”, 2)), “/“, RANDBETWEEN(1900, 2012))</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<p>Often I come across the following problem when designing a database:</p>\n<p>I need to test my queries, but to do that, I need some data. Sometimes large amounts in order to properly test them.</p>\n<p>Now I <em><strong>could</strong></em> enter all of my data manually, but if I have many fields, or need a lot of diversity in my data, that will take forever. </p>\n<p>The solution: Excel!</p>\n<p>Let’s instead generate our data by using excel and excel formulas. For this demonstration, i will be using the following data dictionary:</p>\n<table>\n<thead>\n<tr>\n<th>ID</th>\n<th>first_name</th>\n<th>last_name</th>\n<th>called_by_first</th>\n<th>email</th>\n<th>postcode</th>\n<th>gender</th>\n<th>DOB</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>AutoValue INT</td>\n<td>Text [VARCHAR[</td>\n<td>Text [VARCHAR]</td>\n<td>Yes/No [Boolean]</td>\n<td>Text [VARCHAR]</td>\n<td>Int</td>\n<td>Char</td>\n<td>Date</td>\n</tr>\n</tbody></table>\n<p>The ID is easy, we can just use an incrementinfg number. </p>\n<p>First name is where it starts to get harder… To do this, I’ve actually made a custom webpage that generates any amount of space seporated names as you want! (Although &gt;1000 names tends to lag your computer). </p>\n<p>Then I use the “text to columns” tool in excel (Under Data&gt;Text to columns&gt;Delimited&gt;Tick the “Space” option) to seporate into the first_name and last_name fields. </p>\n<p>Next, to generate a random “Yes/No” answer, I used excels <code>=CHOOSE</code> formula, which, given a number, chooses between options. For example, <code>=CHOOSE(1, YES, NO)</code> would give us “Yes” and a 2 would give us “No”.</p>\n<p>This gives us our next function:<code>=CHOOSE(RANDBETWEEN(1,2), YES, NO)</code>, which randomly gives us either yes or no. </p>\n<p>Next, our email. To do this, I made a nieve approach. To do this, i simply used the concat function<code>=CONCAT(B2, C2, RANDBETWEEN(10, 99), &quot;@example.gov.au&quot;)</code></p>\n<p>Where B2 is our first name, and C2 our last.</p>\n<p>The postcode is very simple, as we can just use <code>=RANDBETWEEN(3000, 3999)</code> (This is the range for victorian postcodes).</p>\n<p>Gender, once again, is fairly simple, and similar to the <code>called_by_first</code> solution:</p>\n<p><code>=CHOOSE(RANDBETWEEN(1,3), &quot;M&quot;, &quot;F&quot;, &quot;O&quot;)</code></p>\n<p>Finally, our most challenging field (in my opinion), the date. This is difficult because base demands we must format it with padded zero’s (e.g. not 3/4/2022 but 03/04/2022).</p>\n<p>For our day, we can use the following:</p>\n<p><code>=TEXT(RANDBETWEEN(1, 28), REPT(&quot;0&quot;, 2))</code></p>\n<p>Which says: Join a random number with enough zero’s to make it 2 digits wide.</p>\n<p>We can repeat this for the month: <code>=TEXT(RANDBETWEEN(1, 12), REPT(&quot;0&quot;, 2))</code></p>\n<p>And the year is fairly simple: <code>=RANDBETWEEN(1900, 2012)</code></p>\n<p>Then, we join all of these, making this monster of a formula:</p>\n<p><code>=CONCAT(TEXT(RANDBETWEEN(1, 28), REPT(&quot;0&quot;, 2)), &quot;/&quot;, TEXT(RANDBETWEEN(1, 12), REPT(&quot;0&quot;, 2)), &quot;/&quot;, RANDBETWEEN(1900, 2012))</code>    </p>\n<p>Now obviously this has a few holes, such as not including &gt; 28th day of any months, but this is perfectly fine for a bit of “filler” data. </p>\n<p>So, to recap, this is our final formula set:</p>\n<table>\n<thead>\n<tr>\n<th>first_name</th>\n<th>last_name</th>\n<th>called by first</th>\n<th>email</th>\n<th>postcode</th>\n<th>Gender</th>\n<th>DOB</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>generator into text to columns</td>\n<td>Split first name</td>\n<td>=CHOOSE(RANDBETWEEN(1,2), YES, NO)</td>\n<td>=CONCAT(B2, C2, RANDBETWEEN(10, 99), “@example.gov.au”)`</td>\n<td>=RANDBETWEEN(3000, 3999)</td>\n<td>=CHOOSE(RANDBETWEEN(1,3), “M”, “F”, “O”)</td>\n<td>=CONCAT(TEXT(RANDBETWEEN(1, 28), REPT(“0”, 2)), “/“, TEXT(RANDBETWEEN(1, 12), REPT(“0”, 2)), “/“, RANDBETWEEN(1900, 2012))</td>\n</tr>\n</tbody></table>\n"},{"title":"Hacker101 CTF: Micro-CMS v2","date":"2021-09-25T07:19:06.000Z","_content":"This is a part of a series I'm doing for the [Hacker101](https://www.hacker101.com/) CTF's.\n\nThis post will focus on the second CTF, named \"Micro-CMS v2\". This has 3 flags, and is rated as \"Moderate\".\n\nThis new CTF boasts several improvements upon the v1, and has the following on the changelog page in the CTF:\n```\nVersion 2\n\nThis version fixed the multitude of security flaws and general functionality bugs that plagued v1. Additionally, we added user authentication; we're still not sure why we didn't think about that the first time, but hindsight is 20/20. By default, users need to be an admin to add or edit pages now.\n```\n\n## Flag 0\nNow, editing requires a login, but how can I get into an account without having the login details? Simple, I need a bypass.\nTo test for an SQL injection vulnerability, I simply wrote a single quote into the username box, hit enter, and got this error:\n```\nTraceback (most recent call last):\n  File \"./main.py\", line 145, in do_login\n    if cur.execute('SELECT password FROM admins WHERE username=\\'%s\\'' % request.form['username'].replace('%', '%%')) == 0:\n  File \"/usr/local/lib/python2.7/site-packages/MySQLdb/cursors.py\", line 255, in execute\n    self.errorhandler(self, exc, value)\n  File \"/usr/local/lib/python2.7/site-packages/MySQLdb/connections.py\", line 50, in defaulterrorhandler\n    raise errorvalue\nProgrammingError: (1064, \"You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near ''''' at line 1\")\n```\nWhich reveals some nice information:\n> The server is running on python (specifically 2.7)\n> It's using MySQL\n> It's using an SQL command that does not sanitize any input\nSo, to bypass, I first tried just using `' OR 1=1;--`, which does not work, maybe I should try a union attack?\nFirst I try `foo' UNION SELECT 'admins', 'dummy';--` as my username, changing the SQL query to:\n```sql\nSELECT password FROM admins WHERE username='foo' UNION SELECT 'admin', 'dummy';--'\n```\nWhich should work, right?\nNope, it interestingly decides to give me all the feedback I need to fix this however, and it spits out the following error:\n```\nThe used SELECT statements have a different number of columns\n```\nTo fix this, I simply inputed the same thing, but changed the number of dummy fields:\n```sql\nfoo' UNION SELECT 'admins', 'dummy', 'dummy', 'dummy';-- \n```\nBut it seemed like however many I put in, it still spat out an error, except for when I put ONLY 1 field, \"admin\".\nThis still was not quite it though, and it returned with \"Invalid password\" (putting another dummy value inside of the password field did nothing here). ","source":"_posts/Hacker101-CTF-Micro-CMS-v2.md","raw":"---\ntitle: 'Hacker101 CTF: Micro-CMS v2'\ndate: 2021-09-25 17:19:06\ntags:\ncategories:\n- CTF Writeups\n---\nThis is a part of a series I'm doing for the [Hacker101](https://www.hacker101.com/) CTF's.\n\nThis post will focus on the second CTF, named \"Micro-CMS v2\". This has 3 flags, and is rated as \"Moderate\".\n\nThis new CTF boasts several improvements upon the v1, and has the following on the changelog page in the CTF:\n```\nVersion 2\n\nThis version fixed the multitude of security flaws and general functionality bugs that plagued v1. Additionally, we added user authentication; we're still not sure why we didn't think about that the first time, but hindsight is 20/20. By default, users need to be an admin to add or edit pages now.\n```\n\n## Flag 0\nNow, editing requires a login, but how can I get into an account without having the login details? Simple, I need a bypass.\nTo test for an SQL injection vulnerability, I simply wrote a single quote into the username box, hit enter, and got this error:\n```\nTraceback (most recent call last):\n  File \"./main.py\", line 145, in do_login\n    if cur.execute('SELECT password FROM admins WHERE username=\\'%s\\'' % request.form['username'].replace('%', '%%')) == 0:\n  File \"/usr/local/lib/python2.7/site-packages/MySQLdb/cursors.py\", line 255, in execute\n    self.errorhandler(self, exc, value)\n  File \"/usr/local/lib/python2.7/site-packages/MySQLdb/connections.py\", line 50, in defaulterrorhandler\n    raise errorvalue\nProgrammingError: (1064, \"You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near ''''' at line 1\")\n```\nWhich reveals some nice information:\n> The server is running on python (specifically 2.7)\n> It's using MySQL\n> It's using an SQL command that does not sanitize any input\nSo, to bypass, I first tried just using `' OR 1=1;--`, which does not work, maybe I should try a union attack?\nFirst I try `foo' UNION SELECT 'admins', 'dummy';--` as my username, changing the SQL query to:\n```sql\nSELECT password FROM admins WHERE username='foo' UNION SELECT 'admin', 'dummy';--'\n```\nWhich should work, right?\nNope, it interestingly decides to give me all the feedback I need to fix this however, and it spits out the following error:\n```\nThe used SELECT statements have a different number of columns\n```\nTo fix this, I simply inputed the same thing, but changed the number of dummy fields:\n```sql\nfoo' UNION SELECT 'admins', 'dummy', 'dummy', 'dummy';-- \n```\nBut it seemed like however many I put in, it still spat out an error, except for when I put ONLY 1 field, \"admin\".\nThis still was not quite it though, and it returned with \"Invalid password\" (putting another dummy value inside of the password field did nothing here). ","slug":"Hacker101-CTF-Micro-CMS-v2","published":1,"updated":"2021-11-30T23:17:49.469Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6eduwj80003ookg5on90xin","content":"<p>This is a part of a series I’m doing for the <a href=\"https://www.hacker101.com/\">Hacker101</a> CTF’s.</p>\n<p>This post will focus on the second CTF, named “Micro-CMS v2”. This has 3 flags, and is rated as “Moderate”.</p>\n<p>This new CTF boasts several improvements upon the v1, and has the following on the changelog page in the CTF:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Version 2</span><br><span class=\"line\"></span><br><span class=\"line\">This version fixed the multitude of security flaws and general functionality bugs that plagued v1. Additionally, we added user authentication; we&#x27;re still not sure why we didn&#x27;t think about that the first time, but hindsight is 20/20. By default, users need to be an admin to add or edit pages now.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Flag-0\"><a href=\"#Flag-0\" class=\"headerlink\" title=\"Flag 0\"></a>Flag 0</h2><p>Now, editing requires a login, but how can I get into an account without having the login details? Simple, I need a bypass.<br>To test for an SQL injection vulnerability, I simply wrote a single quote into the username box, hit enter, and got this error:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File &quot;./main.py&quot;, line 145, in do_login</span><br><span class=\"line\">    if cur.execute(&#x27;SELECT password FROM admins WHERE username=\\&#x27;%s\\&#x27;&#x27; % request.form[&#x27;username&#x27;].replace(&#x27;%&#x27;, &#x27;%%&#x27;)) == 0:</span><br><span class=\"line\">  File &quot;/usr/local/lib/python2.7/site-packages/MySQLdb/cursors.py&quot;, line 255, in execute</span><br><span class=\"line\">    self.errorhandler(self, exc, value)</span><br><span class=\"line\">  File &quot;/usr/local/lib/python2.7/site-packages/MySQLdb/connections.py&quot;, line 50, in defaulterrorhandler</span><br><span class=\"line\">    raise errorvalue</span><br><span class=\"line\">ProgrammingError: (1064, &quot;You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near &#x27;&#x27;&#x27;&#x27;&#x27; at line 1&quot;)</span><br></pre></td></tr></table></figure>\n<p>Which reveals some nice information:</p>\n<blockquote>\n<p>The server is running on python (specifically 2.7)<br>It’s using MySQL<br>It’s using an SQL command that does not sanitize any input<br>So, to bypass, I first tried just using <code>&#39; OR 1=1;--</code>, which does not work, maybe I should try a union attack?<br>First I try <code>foo&#39; UNION SELECT &#39;admins&#39;, &#39;dummy&#39;;--</code> as my username, changing the SQL query to:</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> password <span class=\"keyword\">FROM</span> admins <span class=\"keyword\">WHERE</span> username<span class=\"operator\">=</span><span class=\"string\">&#x27;foo&#x27;</span> <span class=\"keyword\">UNION</span> <span class=\"keyword\">SELECT</span> <span class=\"string\">&#x27;admin&#x27;</span>, <span class=\"string\">&#x27;dummy&#x27;</span>;<span class=\"comment\">--&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>Which should work, right?<br>Nope, it interestingly decides to give me all the feedback I need to fix this however, and it spits out the following error:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The used SELECT statements have a different number of columns</span><br></pre></td></tr></table></figure>\n<p>To fix this, I simply inputed the same thing, but changed the number of dummy fields:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo<span class=\"string\">&#x27; UNION SELECT &#x27;</span>admins<span class=\"string\">&#x27;, &#x27;</span>dummy<span class=\"string\">&#x27;, &#x27;</span>dummy<span class=\"string\">&#x27;, &#x27;</span>dummy<span class=\"string\">&#x27;;-- </span></span><br></pre></td></tr></table></figure>\n<p>But it seemed like however many I put in, it still spat out an error, except for when I put ONLY 1 field, “admin”.<br>This still was not quite it though, and it returned with “Invalid password” (putting another dummy value inside of the password field did nothing here). </p>\n","site":{"data":{}},"excerpt":"","more":"<p>This is a part of a series I’m doing for the <a href=\"https://www.hacker101.com/\">Hacker101</a> CTF’s.</p>\n<p>This post will focus on the second CTF, named “Micro-CMS v2”. This has 3 flags, and is rated as “Moderate”.</p>\n<p>This new CTF boasts several improvements upon the v1, and has the following on the changelog page in the CTF:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Version 2</span><br><span class=\"line\"></span><br><span class=\"line\">This version fixed the multitude of security flaws and general functionality bugs that plagued v1. Additionally, we added user authentication; we&#x27;re still not sure why we didn&#x27;t think about that the first time, but hindsight is 20/20. By default, users need to be an admin to add or edit pages now.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Flag-0\"><a href=\"#Flag-0\" class=\"headerlink\" title=\"Flag 0\"></a>Flag 0</h2><p>Now, editing requires a login, but how can I get into an account without having the login details? Simple, I need a bypass.<br>To test for an SQL injection vulnerability, I simply wrote a single quote into the username box, hit enter, and got this error:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File &quot;./main.py&quot;, line 145, in do_login</span><br><span class=\"line\">    if cur.execute(&#x27;SELECT password FROM admins WHERE username=\\&#x27;%s\\&#x27;&#x27; % request.form[&#x27;username&#x27;].replace(&#x27;%&#x27;, &#x27;%%&#x27;)) == 0:</span><br><span class=\"line\">  File &quot;/usr/local/lib/python2.7/site-packages/MySQLdb/cursors.py&quot;, line 255, in execute</span><br><span class=\"line\">    self.errorhandler(self, exc, value)</span><br><span class=\"line\">  File &quot;/usr/local/lib/python2.7/site-packages/MySQLdb/connections.py&quot;, line 50, in defaulterrorhandler</span><br><span class=\"line\">    raise errorvalue</span><br><span class=\"line\">ProgrammingError: (1064, &quot;You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near &#x27;&#x27;&#x27;&#x27;&#x27; at line 1&quot;)</span><br></pre></td></tr></table></figure>\n<p>Which reveals some nice information:</p>\n<blockquote>\n<p>The server is running on python (specifically 2.7)<br>It’s using MySQL<br>It’s using an SQL command that does not sanitize any input<br>So, to bypass, I first tried just using <code>&#39; OR 1=1;--</code>, which does not work, maybe I should try a union attack?<br>First I try <code>foo&#39; UNION SELECT &#39;admins&#39;, &#39;dummy&#39;;--</code> as my username, changing the SQL query to:</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> password <span class=\"keyword\">FROM</span> admins <span class=\"keyword\">WHERE</span> username<span class=\"operator\">=</span><span class=\"string\">&#x27;foo&#x27;</span> <span class=\"keyword\">UNION</span> <span class=\"keyword\">SELECT</span> <span class=\"string\">&#x27;admin&#x27;</span>, <span class=\"string\">&#x27;dummy&#x27;</span>;<span class=\"comment\">--&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>Which should work, right?<br>Nope, it interestingly decides to give me all the feedback I need to fix this however, and it spits out the following error:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The used SELECT statements have a different number of columns</span><br></pre></td></tr></table></figure>\n<p>To fix this, I simply inputed the same thing, but changed the number of dummy fields:</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo<span class=\"string\">&#x27; UNION SELECT &#x27;</span>admins<span class=\"string\">&#x27;, &#x27;</span>dummy<span class=\"string\">&#x27;, &#x27;</span>dummy<span class=\"string\">&#x27;, &#x27;</span>dummy<span class=\"string\">&#x27;;-- </span></span><br></pre></td></tr></table></figure>\n<p>But it seemed like however many I put in, it still spat out an error, except for when I put ONLY 1 field, “admin”.<br>This still was not quite it though, and it returned with “Invalid password” (putting another dummy value inside of the password field did nothing here). </p>\n"},{"title":"Hacker101 CTF: PostBook","date":"2021-09-26T07:22:32.000Z","_content":"This is a part of a series I'm doing for the [Hacker101](https://www.hacker101.com/) CTF's.\n\nThis post will focus on the seventh CTF, named \"Postbook\". This has a whopping 7 flags, and is rated as \"Easy\".\n\n## Flag 0 \nThis site has a login page, after signing up (using test:test as my username:pword), I saw that there was a user called \"user\", often this is left behind from default configurations, so, I wonder, is that user using a generic password?\nTurns out, they are (a password of 'password')! Which nets us our first flag!\n\n## Flag 1 and 4\nThis one, I accidently got both at once.\nI had a look at the URL during the edit page, and wondered what would happen if i changed it from \"2\" to \"1\", this did 2 things:\nAllowed me to EDIT a private post\nAllowed me to VIEW a private post\n\nBoth of these netting me a flag!\n\n## Flag 2\nThis flag is again a quite interesting one, if you use inspect element to look at how the site formats a POST request for a new post, you would see the following element:\n`<input type=\"hidden\" name=\"user_id\" value=\"2\">`\nBy simply removing the `type=\"hidden\"` part, we can impersonate another user, for example, the admin!\nUpon posting, we get our flag!\n\n## Flag 3\nThis flag is once again trivial, as the clue in hacker101 gives it away: `189 * 5`. To get this flag, I simply change the post ID to 945.\n\n## Flag 5\nThis is where things start getting interesting, in a browser, there are things called cookies, in our postbook example, they make it so you don't have to sign in every new page, this is extremely useful for the user, however, could we exploit this to login as someone else?\n\nFirst things first, I had to be able to view this cookie, to do that, I downloaded the awesome open-source project [Cookie-Quick-Manager](https://github.com/ysard/cookie-quick-manager/), which allows me to edit and view using a browser extension. \nThis cookie had 2 fields, \"session\" and \"id\". I assumed ID was for user ID (as the rest of the website used this as well), but it was just jumbled garbage at the moment, it didnt just say \"2\" for my user ID, it said \"c81e728d9d4c2f636f067f89cc14862c\". This string of text, i thought, might be a hash of the number 2, so I decided to run it through a [hash reverse lookup](https://md5hashing.net/hash), and to my surprise, it spat out the number 2, telling me that it was an MD5 hash.\nAfter this, I simply encoded the number \"1\" in MD5, and edited the cookie. \nThis gave me my flag, only 1 more to go!\n\n## Flag 6\nThe clue for this one is:\n`Deleting a post seems to take an ID that is not a number. Can you figure out what it is?`\n\nFirst things first, I copied the link to the \"delete\" page, and inspected it:\n`/index.php?page=delete.php&id=eccbc87e4b5ce2fe28308fd9f2a7baf3`\nSo it's calling \"delete.php\" with a parameter \"id\" which appears to be a hash.\nSo, once again, I put this hash into a reverse lookup tool (see above), and selected MD5, crossed my fingers, and, it put out \"3\", which was the ID of the post I wanted to remove!\nSo, I decided to try and remove the first ever post by the admin (\"Hello world\").\nTo do so, I just needed to visit this link:\n`/index.php?page=delete.php&id=c4ca4238a0b923820dcc509a6f75849b`\nAnd this gives us our flag, as well as deleting the admins post, while being logged in as any user!\n","source":"_posts/Hacker101-CTF-PostBook.md","raw":"---\ntitle: 'Hacker101 CTF: PostBook'\ndate: 2021-09-26 17:22:32\ntags:\ncategories:\n- CTF Writeups\n---\nThis is a part of a series I'm doing for the [Hacker101](https://www.hacker101.com/) CTF's.\n\nThis post will focus on the seventh CTF, named \"Postbook\". This has a whopping 7 flags, and is rated as \"Easy\".\n\n## Flag 0 \nThis site has a login page, after signing up (using test:test as my username:pword), I saw that there was a user called \"user\", often this is left behind from default configurations, so, I wonder, is that user using a generic password?\nTurns out, they are (a password of 'password')! Which nets us our first flag!\n\n## Flag 1 and 4\nThis one, I accidently got both at once.\nI had a look at the URL during the edit page, and wondered what would happen if i changed it from \"2\" to \"1\", this did 2 things:\nAllowed me to EDIT a private post\nAllowed me to VIEW a private post\n\nBoth of these netting me a flag!\n\n## Flag 2\nThis flag is again a quite interesting one, if you use inspect element to look at how the site formats a POST request for a new post, you would see the following element:\n`<input type=\"hidden\" name=\"user_id\" value=\"2\">`\nBy simply removing the `type=\"hidden\"` part, we can impersonate another user, for example, the admin!\nUpon posting, we get our flag!\n\n## Flag 3\nThis flag is once again trivial, as the clue in hacker101 gives it away: `189 * 5`. To get this flag, I simply change the post ID to 945.\n\n## Flag 5\nThis is where things start getting interesting, in a browser, there are things called cookies, in our postbook example, they make it so you don't have to sign in every new page, this is extremely useful for the user, however, could we exploit this to login as someone else?\n\nFirst things first, I had to be able to view this cookie, to do that, I downloaded the awesome open-source project [Cookie-Quick-Manager](https://github.com/ysard/cookie-quick-manager/), which allows me to edit and view using a browser extension. \nThis cookie had 2 fields, \"session\" and \"id\". I assumed ID was for user ID (as the rest of the website used this as well), but it was just jumbled garbage at the moment, it didnt just say \"2\" for my user ID, it said \"c81e728d9d4c2f636f067f89cc14862c\". This string of text, i thought, might be a hash of the number 2, so I decided to run it through a [hash reverse lookup](https://md5hashing.net/hash), and to my surprise, it spat out the number 2, telling me that it was an MD5 hash.\nAfter this, I simply encoded the number \"1\" in MD5, and edited the cookie. \nThis gave me my flag, only 1 more to go!\n\n## Flag 6\nThe clue for this one is:\n`Deleting a post seems to take an ID that is not a number. Can you figure out what it is?`\n\nFirst things first, I copied the link to the \"delete\" page, and inspected it:\n`/index.php?page=delete.php&id=eccbc87e4b5ce2fe28308fd9f2a7baf3`\nSo it's calling \"delete.php\" with a parameter \"id\" which appears to be a hash.\nSo, once again, I put this hash into a reverse lookup tool (see above), and selected MD5, crossed my fingers, and, it put out \"3\", which was the ID of the post I wanted to remove!\nSo, I decided to try and remove the first ever post by the admin (\"Hello world\").\nTo do so, I just needed to visit this link:\n`/index.php?page=delete.php&id=c4ca4238a0b923820dcc509a6f75849b`\nAnd this gives us our flag, as well as deleting the admins post, while being logged in as any user!\n","slug":"Hacker101-CTF-PostBook","published":1,"updated":"2021-09-26T08:06:06.820Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6eduwj90004ookg6crreprr","content":"<p>This is a part of a series I’m doing for the <a href=\"https://www.hacker101.com/\">Hacker101</a> CTF’s.</p>\n<p>This post will focus on the seventh CTF, named “Postbook”. This has a whopping 7 flags, and is rated as “Easy”.</p>\n<h2 id=\"Flag-0\"><a href=\"#Flag-0\" class=\"headerlink\" title=\"Flag 0\"></a>Flag 0</h2><p>This site has a login page, after signing up (using test:test as my username:pword), I saw that there was a user called “user”, often this is left behind from default configurations, so, I wonder, is that user using a generic password?<br>Turns out, they are (a password of ‘password’)! Which nets us our first flag!</p>\n<h2 id=\"Flag-1-and-4\"><a href=\"#Flag-1-and-4\" class=\"headerlink\" title=\"Flag 1 and 4\"></a>Flag 1 and 4</h2><p>This one, I accidently got both at once.<br>I had a look at the URL during the edit page, and wondered what would happen if i changed it from “2” to “1”, this did 2 things:<br>Allowed me to EDIT a private post<br>Allowed me to VIEW a private post</p>\n<p>Both of these netting me a flag!</p>\n<h2 id=\"Flag-2\"><a href=\"#Flag-2\" class=\"headerlink\" title=\"Flag 2\"></a>Flag 2</h2><p>This flag is again a quite interesting one, if you use inspect element to look at how the site formats a POST request for a new post, you would see the following element:<br><code>&lt;input type=&quot;hidden&quot; name=&quot;user_id&quot; value=&quot;2&quot;&gt;</code><br>By simply removing the <code>type=&quot;hidden&quot;</code> part, we can impersonate another user, for example, the admin!<br>Upon posting, we get our flag!</p>\n<h2 id=\"Flag-3\"><a href=\"#Flag-3\" class=\"headerlink\" title=\"Flag 3\"></a>Flag 3</h2><p>This flag is once again trivial, as the clue in hacker101 gives it away: <code>189 * 5</code>. To get this flag, I simply change the post ID to 945.</p>\n<h2 id=\"Flag-5\"><a href=\"#Flag-5\" class=\"headerlink\" title=\"Flag 5\"></a>Flag 5</h2><p>This is where things start getting interesting, in a browser, there are things called cookies, in our postbook example, they make it so you don’t have to sign in every new page, this is extremely useful for the user, however, could we exploit this to login as someone else?</p>\n<p>First things first, I had to be able to view this cookie, to do that, I downloaded the awesome open-source project <a href=\"https://github.com/ysard/cookie-quick-manager/\">Cookie-Quick-Manager</a>, which allows me to edit and view using a browser extension.<br>This cookie had 2 fields, “session” and “id”. I assumed ID was for user ID (as the rest of the website used this as well), but it was just jumbled garbage at the moment, it didnt just say “2” for my user ID, it said “c81e728d9d4c2f636f067f89cc14862c”. This string of text, i thought, might be a hash of the number 2, so I decided to run it through a <a href=\"https://md5hashing.net/hash\">hash reverse lookup</a>, and to my surprise, it spat out the number 2, telling me that it was an MD5 hash.<br>After this, I simply encoded the number “1” in MD5, and edited the cookie.<br>This gave me my flag, only 1 more to go!</p>\n<h2 id=\"Flag-6\"><a href=\"#Flag-6\" class=\"headerlink\" title=\"Flag 6\"></a>Flag 6</h2><p>The clue for this one is:<br><code>Deleting a post seems to take an ID that is not a number. Can you figure out what it is?</code></p>\n<p>First things first, I copied the link to the “delete” page, and inspected it:<br><code>/index.php?page=delete.php&amp;id=eccbc87e4b5ce2fe28308fd9f2a7baf3</code><br>So it’s calling “delete.php” with a parameter “id” which appears to be a hash.<br>So, once again, I put this hash into a reverse lookup tool (see above), and selected MD5, crossed my fingers, and, it put out “3”, which was the ID of the post I wanted to remove!<br>So, I decided to try and remove the first ever post by the admin (“Hello world”).<br>To do so, I just needed to visit this link:<br><code>/index.php?page=delete.php&amp;id=c4ca4238a0b923820dcc509a6f75849b</code><br>And this gives us our flag, as well as deleting the admins post, while being logged in as any user!</p>\n","site":{"data":{}},"excerpt":"","more":"<p>This is a part of a series I’m doing for the <a href=\"https://www.hacker101.com/\">Hacker101</a> CTF’s.</p>\n<p>This post will focus on the seventh CTF, named “Postbook”. This has a whopping 7 flags, and is rated as “Easy”.</p>\n<h2 id=\"Flag-0\"><a href=\"#Flag-0\" class=\"headerlink\" title=\"Flag 0\"></a>Flag 0</h2><p>This site has a login page, after signing up (using test:test as my username:pword), I saw that there was a user called “user”, often this is left behind from default configurations, so, I wonder, is that user using a generic password?<br>Turns out, they are (a password of ‘password’)! Which nets us our first flag!</p>\n<h2 id=\"Flag-1-and-4\"><a href=\"#Flag-1-and-4\" class=\"headerlink\" title=\"Flag 1 and 4\"></a>Flag 1 and 4</h2><p>This one, I accidently got both at once.<br>I had a look at the URL during the edit page, and wondered what would happen if i changed it from “2” to “1”, this did 2 things:<br>Allowed me to EDIT a private post<br>Allowed me to VIEW a private post</p>\n<p>Both of these netting me a flag!</p>\n<h2 id=\"Flag-2\"><a href=\"#Flag-2\" class=\"headerlink\" title=\"Flag 2\"></a>Flag 2</h2><p>This flag is again a quite interesting one, if you use inspect element to look at how the site formats a POST request for a new post, you would see the following element:<br><code>&lt;input type=&quot;hidden&quot; name=&quot;user_id&quot; value=&quot;2&quot;&gt;</code><br>By simply removing the <code>type=&quot;hidden&quot;</code> part, we can impersonate another user, for example, the admin!<br>Upon posting, we get our flag!</p>\n<h2 id=\"Flag-3\"><a href=\"#Flag-3\" class=\"headerlink\" title=\"Flag 3\"></a>Flag 3</h2><p>This flag is once again trivial, as the clue in hacker101 gives it away: <code>189 * 5</code>. To get this flag, I simply change the post ID to 945.</p>\n<h2 id=\"Flag-5\"><a href=\"#Flag-5\" class=\"headerlink\" title=\"Flag 5\"></a>Flag 5</h2><p>This is where things start getting interesting, in a browser, there are things called cookies, in our postbook example, they make it so you don’t have to sign in every new page, this is extremely useful for the user, however, could we exploit this to login as someone else?</p>\n<p>First things first, I had to be able to view this cookie, to do that, I downloaded the awesome open-source project <a href=\"https://github.com/ysard/cookie-quick-manager/\">Cookie-Quick-Manager</a>, which allows me to edit and view using a browser extension.<br>This cookie had 2 fields, “session” and “id”. I assumed ID was for user ID (as the rest of the website used this as well), but it was just jumbled garbage at the moment, it didnt just say “2” for my user ID, it said “c81e728d9d4c2f636f067f89cc14862c”. This string of text, i thought, might be a hash of the number 2, so I decided to run it through a <a href=\"https://md5hashing.net/hash\">hash reverse lookup</a>, and to my surprise, it spat out the number 2, telling me that it was an MD5 hash.<br>After this, I simply encoded the number “1” in MD5, and edited the cookie.<br>This gave me my flag, only 1 more to go!</p>\n<h2 id=\"Flag-6\"><a href=\"#Flag-6\" class=\"headerlink\" title=\"Flag 6\"></a>Flag 6</h2><p>The clue for this one is:<br><code>Deleting a post seems to take an ID that is not a number. Can you figure out what it is?</code></p>\n<p>First things first, I copied the link to the “delete” page, and inspected it:<br><code>/index.php?page=delete.php&amp;id=eccbc87e4b5ce2fe28308fd9f2a7baf3</code><br>So it’s calling “delete.php” with a parameter “id” which appears to be a hash.<br>So, once again, I put this hash into a reverse lookup tool (see above), and selected MD5, crossed my fingers, and, it put out “3”, which was the ID of the post I wanted to remove!<br>So, I decided to try and remove the first ever post by the admin (“Hello world”).<br>To do so, I just needed to visit this link:<br><code>/index.php?page=delete.php&amp;id=c4ca4238a0b923820dcc509a6f75849b</code><br>And this gives us our flag, as well as deleting the admins post, while being logged in as any user!</p>\n"},{"title":"Hacker101 CTF: Micro-CMS v1","date":"2021-09-25T03:57:58.000Z","_content":"This is a part of a series I’m doing for the [Hacker101](https://www.hacker101.com/) CTF’s.\n\nThis first post will focus on the first CTF, named “Micro-CMS v1”. This has 4 flags, and is rated as “Easy”.\n\nFlag 0\nThis first flag is relitively easy to find, to start off with, I created a page after looking around, and saw that the pages were indexed as such:\n1, 2, 10\nWhich begs the question, where is 3 to 8?\nUpon accessing page 6 (by simply typing the url myself), it responds with a 403, which means there is some content on the page, just none I can access. To get to this, I next tried to edit a page, which resolved the URL:\n`http://[example]/[user_string]/page/edit/1`\nSo, what happens if I change the 1 to a 6 here?\nBingo, our first flag!\n\n## Flag 1\nFor our second flag, we get a hint of trying to tamper with every input, so thats just what i did. I decided to insert `<script>alert(0)</script>` everywhere I could, eventually trying the title of a post, and voilla! Upon going to the home page, the XSS activates, and I get my second flag!\n\n## Flag 2\nUpon editing a page, it is fairly obvious that some sort of SQL request must be sent to retrieve said pages contents, so I decided to add a single quote to the end of the URL, netting us our third flag with an SQL injection vulnerability!\n\nFlag 3\nThe edit page has a curious statement on the bottom:\n\n```plaintext\nMarkdown is supported, but scripts are not\n```\nWhich begs the question, what about other HTML tags?\nSo I test with a simple `<h1>Testing</h1>`, and it turns out that works, so, is there a way to execute code inside of a html element? Yes, there is!\n```html\n<button \"onclick=alert(0)\">Click me!</button>\n```\naaand, no flag? Curious to see what was going wrong, I took a look using inspect element, and, funnily enough, there was the flag, inside the properties of the button class!\n\nDone\nWith that, we’ve just completed the first proper CTF!\n","source":"_posts/Hacker101-CTF-Micro-CMS-v1.md","raw":"---\ntitle: 'Hacker101 CTF: Micro-CMS v1'\ndate: 2021-09-25 13:57:58\ntags:\n---\nThis is a part of a series I’m doing for the [Hacker101](https://www.hacker101.com/) CTF’s.\n\nThis first post will focus on the first CTF, named “Micro-CMS v1”. This has 4 flags, and is rated as “Easy”.\n\nFlag 0\nThis first flag is relitively easy to find, to start off with, I created a page after looking around, and saw that the pages were indexed as such:\n1, 2, 10\nWhich begs the question, where is 3 to 8?\nUpon accessing page 6 (by simply typing the url myself), it responds with a 403, which means there is some content on the page, just none I can access. To get to this, I next tried to edit a page, which resolved the URL:\n`http://[example]/[user_string]/page/edit/1`\nSo, what happens if I change the 1 to a 6 here?\nBingo, our first flag!\n\n## Flag 1\nFor our second flag, we get a hint of trying to tamper with every input, so thats just what i did. I decided to insert `<script>alert(0)</script>` everywhere I could, eventually trying the title of a post, and voilla! Upon going to the home page, the XSS activates, and I get my second flag!\n\n## Flag 2\nUpon editing a page, it is fairly obvious that some sort of SQL request must be sent to retrieve said pages contents, so I decided to add a single quote to the end of the URL, netting us our third flag with an SQL injection vulnerability!\n\nFlag 3\nThe edit page has a curious statement on the bottom:\n\n```plaintext\nMarkdown is supported, but scripts are not\n```\nWhich begs the question, what about other HTML tags?\nSo I test with a simple `<h1>Testing</h1>`, and it turns out that works, so, is there a way to execute code inside of a html element? Yes, there is!\n```html\n<button \"onclick=alert(0)\">Click me!</button>\n```\naaand, no flag? Curious to see what was going wrong, I took a look using inspect element, and, funnily enough, there was the flag, inside the properties of the button class!\n\nDone\nWith that, we’ve just completed the first proper CTF!\n","slug":"Hacker101-CTF-Micro-CMS-v1","published":1,"updated":"2021-11-25T03:04:02.580Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6eduwja0006ookgg3yk2zs8","content":"<p>This is a part of a series I’m doing for the <a href=\"https://www.hacker101.com/\">Hacker101</a> CTF’s.</p>\n<p>This first post will focus on the first CTF, named “Micro-CMS v1”. This has 4 flags, and is rated as “Easy”.</p>\n<p>Flag 0<br>This first flag is relitively easy to find, to start off with, I created a page after looking around, and saw that the pages were indexed as such:<br>1, 2, 10<br>Which begs the question, where is 3 to 8?<br>Upon accessing page 6 (by simply typing the url myself), it responds with a 403, which means there is some content on the page, just none I can access. To get to this, I next tried to edit a page, which resolved the URL:<br><code>http://[example]/[user_string]/page/edit/1</code><br>So, what happens if I change the 1 to a 6 here?<br>Bingo, our first flag!</p>\n<h2 id=\"Flag-1\"><a href=\"#Flag-1\" class=\"headerlink\" title=\"Flag 1\"></a>Flag 1</h2><p>For our second flag, we get a hint of trying to tamper with every input, so thats just what i did. I decided to insert <code>&lt;script&gt;alert(0)&lt;/script&gt;</code> everywhere I could, eventually trying the title of a post, and voilla! Upon going to the home page, the XSS activates, and I get my second flag!</p>\n<h2 id=\"Flag-2\"><a href=\"#Flag-2\" class=\"headerlink\" title=\"Flag 2\"></a>Flag 2</h2><p>Upon editing a page, it is fairly obvious that some sort of SQL request must be sent to retrieve said pages contents, so I decided to add a single quote to the end of the URL, netting us our third flag with an SQL injection vulnerability!</p>\n<p>Flag 3<br>The edit page has a curious statement on the bottom:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Markdown is supported, but scripts are not</span><br></pre></td></tr></table></figure>\n<p>Which begs the question, what about other HTML tags?<br>So I test with a simple <code>&lt;h1&gt;Testing&lt;/h1&gt;</code>, and it turns out that works, so, is there a way to execute code inside of a html element? Yes, there is!</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> &quot;<span class=\"attr\">onclick</span>=<span class=\"string\">alert(0)</span>&quot;&gt;</span>Click me!<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>aaand, no flag? Curious to see what was going wrong, I took a look using inspect element, and, funnily enough, there was the flag, inside the properties of the button class!</p>\n<p>Done<br>With that, we’ve just completed the first proper CTF!</p>\n","site":{"data":{}},"excerpt":"","more":"<p>This is a part of a series I’m doing for the <a href=\"https://www.hacker101.com/\">Hacker101</a> CTF’s.</p>\n<p>This first post will focus on the first CTF, named “Micro-CMS v1”. This has 4 flags, and is rated as “Easy”.</p>\n<p>Flag 0<br>This first flag is relitively easy to find, to start off with, I created a page after looking around, and saw that the pages were indexed as such:<br>1, 2, 10<br>Which begs the question, where is 3 to 8?<br>Upon accessing page 6 (by simply typing the url myself), it responds with a 403, which means there is some content on the page, just none I can access. To get to this, I next tried to edit a page, which resolved the URL:<br><code>http://[example]/[user_string]/page/edit/1</code><br>So, what happens if I change the 1 to a 6 here?<br>Bingo, our first flag!</p>\n<h2 id=\"Flag-1\"><a href=\"#Flag-1\" class=\"headerlink\" title=\"Flag 1\"></a>Flag 1</h2><p>For our second flag, we get a hint of trying to tamper with every input, so thats just what i did. I decided to insert <code>&lt;script&gt;alert(0)&lt;/script&gt;</code> everywhere I could, eventually trying the title of a post, and voilla! Upon going to the home page, the XSS activates, and I get my second flag!</p>\n<h2 id=\"Flag-2\"><a href=\"#Flag-2\" class=\"headerlink\" title=\"Flag 2\"></a>Flag 2</h2><p>Upon editing a page, it is fairly obvious that some sort of SQL request must be sent to retrieve said pages contents, so I decided to add a single quote to the end of the URL, netting us our third flag with an SQL injection vulnerability!</p>\n<p>Flag 3<br>The edit page has a curious statement on the bottom:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Markdown is supported, but scripts are not</span><br></pre></td></tr></table></figure>\n<p>Which begs the question, what about other HTML tags?<br>So I test with a simple <code>&lt;h1&gt;Testing&lt;/h1&gt;</code>, and it turns out that works, so, is there a way to execute code inside of a html element? Yes, there is!</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> &quot;<span class=\"attr\">onclick</span>=<span class=\"string\">alert(0)</span>&quot;&gt;</span>Click me!<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>aaand, no flag? Curious to see what was going wrong, I took a look using inspect element, and, funnily enough, there was the flag, inside the properties of the button class!</p>\n<p>Done<br>With that, we’ve just completed the first proper CTF!</p>\n"},{"title":"Hacker101 CTF: Y2FuIHlvdSByZWNvbj8/","date":"2021-10-05T23:25:57.000Z","catagories":["CTF Writeups"],"_content":"This is a part of a series I'm doing for the [Hacker101](https://www.hacker101.com/) CTF's.\n\nThis post will focus on the latest CTF, named \"Y2FuIHlvdSByZWNvbj8/\". This has 3 flags, and is rated as \"Moderate\".\n\n## Flag 0 ","source":"_posts/Hacker101-CTF-Y2FuIHlvdSByZWNvbj8.md","raw":"---\ntitle: 'Hacker101 CTF: Y2FuIHlvdSByZWNvbj8/'\ndate: 2021-10-06 10:25:57\ntags:\ncatagories:\n- CTF Writeups\n---\nThis is a part of a series I'm doing for the [Hacker101](https://www.hacker101.com/) CTF's.\n\nThis post will focus on the latest CTF, named \"Y2FuIHlvdSByZWNvbj8/\". This has 3 flags, and is rated as \"Moderate\".\n\n## Flag 0 ","slug":"Hacker101-CTF-Y2FuIHlvdSByZWNvbj8","published":1,"updated":"2021-10-05T23:32:45.710Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6eduwjb0009ookg1uvaekvb","content":"<p>This is a part of a series I’m doing for the <a href=\"https://www.hacker101.com/\">Hacker101</a> CTF’s.</p>\n<p>This post will focus on the latest CTF, named “Y2FuIHlvdSByZWNvbj8/“. This has 3 flags, and is rated as “Moderate”.</p>\n<h2 id=\"Flag-0\"><a href=\"#Flag-0\" class=\"headerlink\" title=\"Flag 0\"></a>Flag 0</h2>","site":{"data":{}},"excerpt":"","more":"<p>This is a part of a series I’m doing for the <a href=\"https://www.hacker101.com/\">Hacker101</a> CTF’s.</p>\n<p>This post will focus on the latest CTF, named “Y2FuIHlvdSByZWNvbj8/“. This has 3 flags, and is rated as “Moderate”.</p>\n<h2 id=\"Flag-0\"><a href=\"#Flag-0\" class=\"headerlink\" title=\"Flag 0\"></a>Flag 0</h2>"},{"title":"Geocaching Event Project","date":"2022-01-14T05:46:59.000Z","_content":"\nRecently, I designed a GeoCache for a \"lab\" event on behalf of my mother. If you don't know what a geocache is, it's a puzzle you hide, then give coordinates for. For this event, I aimed to simply create a technically challenging cache.\n\nTo do this, I decided to use something called a [liquid crystal valve](https://cdn-shop.adafruit.com/product-videos/1024x768/3330-04.mp4), which is *basically* a piece of glass you can toggle between completely black, and nearly clear.\n\nSo, all I needed was a voltage source, and an NO switch with a piece of paper behind the glass, right? Not quite...\n\nIt turns out if you intend on running this valve for more than about a minute, you create a DC bias, damaging the display, breaking it.\n\nTo fix this, I first tried to use a 555 timer circuit, however, that started to become a complication when the display wouldn't turn off properly. (Preview of toggle glass with a 555 timer circuit available [here](https://youtu.be/jOSFQYeMsKA))\n\nTo both make this smaller, and easier to wire, I simplified it a bunch. I simply connected an attiny85 with the following code to a NOT/Invert gate made with a 2N2222 transistor, connected to a reed switch (magnet activated switch) through an 18650 Li-ion battery and that was about it!\n\nTheoretically, I could have done this all just with the microcontroller, getting the input from the reed switch, pull-down resistor, etc... But I wanted to keep it more \"electronics\" based for this project.\n\nCode:\n\n```c\n#define F_CPU 1000000 // Define the cpu clock speed to be 1mhz, so that my wait functions time for the correct time.\n\n                      // Mis-calculating this can lead to some... interesting bugs...\n\n                      // e.g. if clock speed is defined as \"8000000\", with a 1 second wait It will wait 8 seconds instead.\n\n\n\n#include <avr/io.h>     // Input and output package\n\n#include <util/delay.h> // Package to do timing and delays\n\n\n\nint main(){\n\n    PORTB = (1 << PB3);         // Configure PB3 as output. (Screen); all others input.\n\n    while (1){\n\n      PORTB ^= (1 << PB3);      // Invert the current value of PB3\n\n      _delay_ms(50/3);          // Wait 16.6666 milliseconds, or 1/60 of a second, this is to generate a 60hz square wave\n\n    }\n\n    return 0;                   // Only reason this is here is to stop GCC from cracking it\n\n}\n```\n\nHere, you can see the full setup (Spoilers!!)\n![Full Geocache](/blog/images/geocache.png)\nYellow wires are reed switch, red and yellow go to the display, backed with a perf. board since the leads by themselves are a bit flimsy. Red and black are the battery. \n\n### Important to Note:\nThis project (and it's code) is licensed under the CC BY-NC 4.0 license, a copy of which is available [here](https://creativecommons.org/licenses/by-nc/4.0/legalcode). To summerise:\n\nYou are free to:\nShare — copy and redistribute the material in any medium or format\nAdapt — remix, transform, and build upon the material \n\nUnder the following terms:\nAttribution — You must give appropriate credit, provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use.\n\nNonCommercial — You may not use the material for commercial purposes.\n\nNo additional restrictions — You may not apply legal terms or technological measures that legally restrict others from doing anything the license permits.\n\n(Summary Courtesy of the CC foundation)\n","source":"_posts/Geocaching-Event-Project.md","raw":"---\ntitle: Geocaching Event Project\ndate: 2022-01-14 16:46:59\ntags: circuit, electronics, \n---\n\nRecently, I designed a GeoCache for a \"lab\" event on behalf of my mother. If you don't know what a geocache is, it's a puzzle you hide, then give coordinates for. For this event, I aimed to simply create a technically challenging cache.\n\nTo do this, I decided to use something called a [liquid crystal valve](https://cdn-shop.adafruit.com/product-videos/1024x768/3330-04.mp4), which is *basically* a piece of glass you can toggle between completely black, and nearly clear.\n\nSo, all I needed was a voltage source, and an NO switch with a piece of paper behind the glass, right? Not quite...\n\nIt turns out if you intend on running this valve for more than about a minute, you create a DC bias, damaging the display, breaking it.\n\nTo fix this, I first tried to use a 555 timer circuit, however, that started to become a complication when the display wouldn't turn off properly. (Preview of toggle glass with a 555 timer circuit available [here](https://youtu.be/jOSFQYeMsKA))\n\nTo both make this smaller, and easier to wire, I simplified it a bunch. I simply connected an attiny85 with the following code to a NOT/Invert gate made with a 2N2222 transistor, connected to a reed switch (magnet activated switch) through an 18650 Li-ion battery and that was about it!\n\nTheoretically, I could have done this all just with the microcontroller, getting the input from the reed switch, pull-down resistor, etc... But I wanted to keep it more \"electronics\" based for this project.\n\nCode:\n\n```c\n#define F_CPU 1000000 // Define the cpu clock speed to be 1mhz, so that my wait functions time for the correct time.\n\n                      // Mis-calculating this can lead to some... interesting bugs...\n\n                      // e.g. if clock speed is defined as \"8000000\", with a 1 second wait It will wait 8 seconds instead.\n\n\n\n#include <avr/io.h>     // Input and output package\n\n#include <util/delay.h> // Package to do timing and delays\n\n\n\nint main(){\n\n    PORTB = (1 << PB3);         // Configure PB3 as output. (Screen); all others input.\n\n    while (1){\n\n      PORTB ^= (1 << PB3);      // Invert the current value of PB3\n\n      _delay_ms(50/3);          // Wait 16.6666 milliseconds, or 1/60 of a second, this is to generate a 60hz square wave\n\n    }\n\n    return 0;                   // Only reason this is here is to stop GCC from cracking it\n\n}\n```\n\nHere, you can see the full setup (Spoilers!!)\n![Full Geocache](/blog/images/geocache.png)\nYellow wires are reed switch, red and yellow go to the display, backed with a perf. board since the leads by themselves are a bit flimsy. Red and black are the battery. \n\n### Important to Note:\nThis project (and it's code) is licensed under the CC BY-NC 4.0 license, a copy of which is available [here](https://creativecommons.org/licenses/by-nc/4.0/legalcode). To summerise:\n\nYou are free to:\nShare — copy and redistribute the material in any medium or format\nAdapt — remix, transform, and build upon the material \n\nUnder the following terms:\nAttribution — You must give appropriate credit, provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use.\n\nNonCommercial — You may not use the material for commercial purposes.\n\nNo additional restrictions — You may not apply legal terms or technological measures that legally restrict others from doing anything the license permits.\n\n(Summary Courtesy of the CC foundation)\n","slug":"Geocaching-Event-Project","published":1,"updated":"2022-12-02T00:37:50.391Z","_id":"cl6eduwjc000aookgft0ufku8","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Recently, I designed a GeoCache for a “lab” event on behalf of my mother. If you don’t know what a geocache is, it’s a puzzle you hide, then give coordinates for. For this event, I aimed to simply create a technically challenging cache.</p>\n<p>To do this, I decided to use something called a <a href=\"https://cdn-shop.adafruit.com/product-videos/1024x768/3330-04.mp4\">liquid crystal valve</a>, which is <em>basically</em> a piece of glass you can toggle between completely black, and nearly clear.</p>\n<p>So, all I needed was a voltage source, and an NO switch with a piece of paper behind the glass, right? Not quite…</p>\n<p>It turns out if you intend on running this valve for more than about a minute, you create a DC bias, damaging the display, breaking it.</p>\n<p>To fix this, I first tried to use a 555 timer circuit, however, that started to become a complication when the display wouldn’t turn off properly. (Preview of toggle glass with a 555 timer circuit available <a href=\"https://youtu.be/jOSFQYeMsKA\">here</a>)</p>\n<p>To both make this smaller, and easier to wire, I simplified it a bunch. I simply connected an attiny85 with the following code to a NOT&#x2F;Invert gate made with a 2N2222 transistor, connected to a reed switch (magnet activated switch) through an 18650 Li-ion battery and that was about it!</p>\n<p>Theoretically, I could have done this all just with the microcontroller, getting the input from the reed switch, pull-down resistor, etc… But I wanted to keep it more “electronics” based for this project.</p>\n<p>Code:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> F_CPU 1000000 <span class=\"comment\">// Define the cpu clock speed to be 1mhz, so that my wait functions time for the correct time.</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">                      <span class=\"comment\">// Mis-calculating this can lead to some... interesting bugs...</span></span><br><span class=\"line\"></span><br><span class=\"line\">                      <span class=\"comment\">// e.g. if clock speed is defined as &quot;8000000&quot;, with a 1 second wait It will wait 8 seconds instead.</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;avr/io.h&gt;</span>     <span class=\"comment\">// Input and output package</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;util/delay.h&gt;</span> <span class=\"comment\">// Package to do timing and delays</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    PORTB = (<span class=\"number\">1</span> &lt;&lt; PB3);         <span class=\"comment\">// Configure PB3 as output. (Screen); all others input.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      PORTB ^= (<span class=\"number\">1</span> &lt;&lt; PB3);      <span class=\"comment\">// Invert the current value of PB3</span></span><br><span class=\"line\"></span><br><span class=\"line\">      _delay_ms(<span class=\"number\">50</span>/<span class=\"number\">3</span>);          <span class=\"comment\">// Wait 16.6666 milliseconds, or 1/60 of a second, this is to generate a 60hz square wave</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;                   <span class=\"comment\">// Only reason this is here is to stop GCC from cracking it</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Here, you can see the full setup (Spoilers!!)<br><img src=\"/blog/blog/images/geocache.png\" alt=\"Full Geocache\"><br>Yellow wires are reed switch, red and yellow go to the display, backed with a perf. board since the leads by themselves are a bit flimsy. Red and black are the battery. </p>\n<h3 id=\"Important-to-Note\"><a href=\"#Important-to-Note\" class=\"headerlink\" title=\"Important to Note:\"></a>Important to Note:</h3><p>This project (and it’s code) is licensed under the CC BY-NC 4.0 license, a copy of which is available <a href=\"https://creativecommons.org/licenses/by-nc/4.0/legalcode\">here</a>. To summerise:</p>\n<p>You are free to:<br>Share — copy and redistribute the material in any medium or format<br>Adapt — remix, transform, and build upon the material </p>\n<p>Under the following terms:<br>Attribution — You must give appropriate credit, provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use.</p>\n<p>NonCommercial — You may not use the material for commercial purposes.</p>\n<p>No additional restrictions — You may not apply legal terms or technological measures that legally restrict others from doing anything the license permits.</p>\n<p>(Summary Courtesy of the CC foundation)</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Recently, I designed a GeoCache for a “lab” event on behalf of my mother. If you don’t know what a geocache is, it’s a puzzle you hide, then give coordinates for. For this event, I aimed to simply create a technically challenging cache.</p>\n<p>To do this, I decided to use something called a <a href=\"https://cdn-shop.adafruit.com/product-videos/1024x768/3330-04.mp4\">liquid crystal valve</a>, which is <em>basically</em> a piece of glass you can toggle between completely black, and nearly clear.</p>\n<p>So, all I needed was a voltage source, and an NO switch with a piece of paper behind the glass, right? Not quite…</p>\n<p>It turns out if you intend on running this valve for more than about a minute, you create a DC bias, damaging the display, breaking it.</p>\n<p>To fix this, I first tried to use a 555 timer circuit, however, that started to become a complication when the display wouldn’t turn off properly. (Preview of toggle glass with a 555 timer circuit available <a href=\"https://youtu.be/jOSFQYeMsKA\">here</a>)</p>\n<p>To both make this smaller, and easier to wire, I simplified it a bunch. I simply connected an attiny85 with the following code to a NOT&#x2F;Invert gate made with a 2N2222 transistor, connected to a reed switch (magnet activated switch) through an 18650 Li-ion battery and that was about it!</p>\n<p>Theoretically, I could have done this all just with the microcontroller, getting the input from the reed switch, pull-down resistor, etc… But I wanted to keep it more “electronics” based for this project.</p>\n<p>Code:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> F_CPU 1000000 <span class=\"comment\">// Define the cpu clock speed to be 1mhz, so that my wait functions time for the correct time.</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">                      <span class=\"comment\">// Mis-calculating this can lead to some... interesting bugs...</span></span><br><span class=\"line\"></span><br><span class=\"line\">                      <span class=\"comment\">// e.g. if clock speed is defined as &quot;8000000&quot;, with a 1 second wait It will wait 8 seconds instead.</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;avr/io.h&gt;</span>     <span class=\"comment\">// Input and output package</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;util/delay.h&gt;</span> <span class=\"comment\">// Package to do timing and delays</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    PORTB = (<span class=\"number\">1</span> &lt;&lt; PB3);         <span class=\"comment\">// Configure PB3 as output. (Screen); all others input.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      PORTB ^= (<span class=\"number\">1</span> &lt;&lt; PB3);      <span class=\"comment\">// Invert the current value of PB3</span></span><br><span class=\"line\"></span><br><span class=\"line\">      _delay_ms(<span class=\"number\">50</span>/<span class=\"number\">3</span>);          <span class=\"comment\">// Wait 16.6666 milliseconds, or 1/60 of a second, this is to generate a 60hz square wave</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;                   <span class=\"comment\">// Only reason this is here is to stop GCC from cracking it</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Here, you can see the full setup (Spoilers!!)<br><img src=\"/blog/blog/images/geocache.png\" alt=\"Full Geocache\"><br>Yellow wires are reed switch, red and yellow go to the display, backed with a perf. board since the leads by themselves are a bit flimsy. Red and black are the battery. </p>\n<h3 id=\"Important-to-Note\"><a href=\"#Important-to-Note\" class=\"headerlink\" title=\"Important to Note:\"></a>Important to Note:</h3><p>This project (and it’s code) is licensed under the CC BY-NC 4.0 license, a copy of which is available <a href=\"https://creativecommons.org/licenses/by-nc/4.0/legalcode\">here</a>. To summerise:</p>\n<p>You are free to:<br>Share — copy and redistribute the material in any medium or format<br>Adapt — remix, transform, and build upon the material </p>\n<p>Under the following terms:<br>Attribution — You must give appropriate credit, provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use.</p>\n<p>NonCommercial — You may not use the material for commercial purposes.</p>\n<p>No additional restrictions — You may not apply legal terms or technological measures that legally restrict others from doing anything the license permits.</p>\n<p>(Summary Courtesy of the CC foundation)</p>\n"},{"title":"Making a bash script to fix a minor annoyance","date":"2021-11-25T22:37:31.000Z","_content":"So, it turns out, if you try and run pip while in my schools network, it recognises a self signed ssl certificate and refuses to connect due to security concerns, forcing us to do`pip install [package] --trusted-host pypi.org --trusted-host files.pythonhosted.org` every single time we want to install a package, which is really annoying. So, why not fix this?\n\nIt turns out pip has a semi-universal config system, meaning that I can simply quickly shop up a script to permanently trust specific hosts. Turns out there are 3 'levels' of config file ([See here](https://pip.pypa.io/en/stable/topics/configuration/) for the full docs), that load in this order, overwriting eachother:\n\n- Enviroment Variable - Always overwrites everything else\n  \n- Global (All users on system) - Only overwrites User and Global\n  \n- User (just the current user) - Only overwrites Site\n  \n- Site (per enviroment) - Cannot overwrite\n  \n\nNow ideally, I'd write to the *Enviroment Variable*, to prevent a user accidently messing up the fix, however, I want this solution to work for all users, and writing to the Env Var seems to require admin permissions, so I'll settle for the Global config file (`/Library/Application Support/pip/pip.conf` on MacOS).\n\nSo by simply doing\n\n```bash\nmkdir -p /Library/Application\\ Support/pip && printf \"%s\\n\" \"[global]\" \"trusted-host = pypi.python.org\" \"               pypi.org\" \"               files.pythonhosted.org\" > /Library/Application\\ Support/pip/pip.conf || echo \"Failed to create conf file, please run with root permissions and try again\"\n```\n\nI can write the correct config options.\n\nLets break this down, first I do `mkdir -p`, making a new directory, with intermediate folders automatically being created if needed (thus the `-p` option). After that, if the folder creation runs successfully, print the following string:\n\n```\n[global]\n    trusted-host = pypi.python.org \n                   pypi.org \n                   files.pythonhosted.org\n```\n\nAnd then output it to pip.conf (using the `>` redirection character), else if it fails (`||`), then print an error msg.\n\nOk, so now pip is fixed, but theres still 1 annoying issue, anaconda never likes to start up while connected to wifi, on this specific network. To figure this out, I simply opened wireshark before opening anaconda, and tried to figure out what was going wrong.\n\nTurns out, it tries to call home to see if there are any updates avalible, however, if the server does not respond for any reason (say for example, an ssl certificate being self signed and causing an error), it has an insanely long timeout period.\n\nSo, let's fix this!\n\nThe first thing I did, was try to see if there was any ssl documentation, turns out, [there is!](https://docs.anaconda.com/anaconda-repository/admin-guide/install/config/config-reference/#ssl-options) So, all I needed to do, was make a new certificate, append my schools self signed certificate, and I'd be home free!\n\nEasier said than done it turns out...\n\nFirst, I had to download the current, full ssl certificate, I opted to use curl for this:\n\n`curl https://curl.se/ca/cacert.pem -o $PWD/.conda.ssl.pem`\n\nAfter downloading it, I next had to fetch woodleighs certificate... once again, easier said than done!\n\nTo do this, I ended up using the fantastic `openssl` client's feature of being able to see the certificates you send and recieve.\n\nThis is the line i came up with:\n\n```bash\nopenssl s_client -showcerts -servername \"curl.haxx.se\" -connect curl.haxx.se:443 | pcregrep -M -e \"----.*(\\n.*){19}\" | pcregrep -M -v -e \"---\\nServer certificate\" >> $b || echo \"Failed to append to new certificate\"\n```\n\nNow, how does that work?\n\nGetting into the openssl `man` page (which is ***STUPID*** long BTW), we can see the `s_client` option does the following:\n\n```plaintext\nThe s_client command implements a generic SSL/TLS client which connects to a remote host using SSL/TLS.\n\n     If a connection is established with an SSL server, any data received from the server is displayed and\n     any key presses will be sent to the server.\n```\n\nSo next, we add the `-showcerts` and `-servername` options, opting to connect to the curl page (ironic, I know), followed by the `-connect` option, specifying what port we would like to connect to in specific (443 for https).\n\nI then pipe (`|`) this to a bunch of pcregrep statements, designed to filter down the last certificate, which, conveniantly, is the school one. I then append (`>>`) that to the certificate sheet (here, stored in the $b variable), otherwise, echo an error command.\n\nI then copy the file to a new location for permanent storage, in particular the $HOME location, named with a dot `.` to make sure the file is non-visable.\n\nI then run 2 sed commands\n\n```bash\nsed -i '' \"s~ssl_verify: true~$c~\" $HOME/$a ||  sed -i '' \"s~ssl_verify: True~$c~\" $HOME/$a\n```\n\nThis repleaces the content `ssl_verify: true` (the default value) with the directory to my custom certificate, basically saying \"use that certificate for ssl verification\". I also run another copy of this searching for a capital T in 'true' just be to sure.\n\nAfter that, everything is patched and the follow should have been fixed:\n\n- Anaconda taking forever to load when connected to the internet\n  \n- Pip Needing an overly complex install cmd (now it should just be `pip install package`)\n  \n\nI am currently investigating the occasional nature of curl to fail, ironically due to a self signed ssl certificate, although I may simply switch to wget instead to avoid this issue.\n\nOn top of that, some installations of anaconda seem to be in different places, without any rhyme or reason, and i'll be investigating this further soon.\n\nThe full script:\n\n```bash\n#!/bin/bash\n\n# This script patches both pip and anaconda to not give self-signed cert errors while maintaining an ssl connection.\n# Made by Jake Aronleigh - contact me at: ghostoverflow256@gmail.com\n\necho \"Patching pip first\"\n# This patch tells the pip program to always trust the needed sites through a global config file. \n# The loading order for config files is as follows:\n# Path specified by the PIP_CONFIG_FILE enviroment variable (couldnt get that to work without root)\n# Global - /Library/Application Support/pip/pip.conf\n# User - $HOME/Library/Application Support/pip/pip.conf OR $HOME/.config/pip/pip.conf\n# Site - $VIRTUAL_ENV/pip.conf\n\n# Here I'm using the Global method. It would be better to use the PIP_CONFIG_FILE method,\n# however to edit the enviroemtn variables I would need root access. \n# This creates an issue of authentication, meaning I would be unable to portably pack this \n# Application without giving EVERY user some sort of admin role, which is not wise. \nmkdir -p /Library/Application\\ Support/pip &&  printf \"%s\\n\" \"[global]\" \"trusted-host = pypi.python.org\" \"               pypi.org\" \"               files.pythonhosted.org\" > /Library/Application\\ Support/pip/pip.conf || echo \"Failed to create conf file, please run with root permissions and try again\"\necho \"Patched pip, attempting anaconda\"\n\n# The way this patch works is it gets the file for ssl certificates, then patches in the\n# woodleigh ssl certs to make sure anaconda doesn't think it's being attacked by a Man-in-the-middle attack. \nb=.conda.ssl.pem\nc=\"ssl_verify: $HOME/$b\"\na=.continuum/anaconda-client/config.yaml\nmv \"$PWD/$b\" \"$PWD/old_certs/$b\" || echo \"Couldn't move old file, assuming this is the first time running this patch\"\ncurl https://curl.se/ca/cacert.pem -o $PWD/$b || echo \"Curl failed, couldn't get default certificate!\" # This sometimes doesnt work - Why?\necho quit | openssl s_client -showcerts -servername \"curl.haxx.se\" -connect curl.haxx.se:443 | pcregrep -M -e \"----.*(\\n.*){19}\" | pcregrep -M -v -e \"---\\nServer certificate\" >> $b || echo \"Failed to append to new certificate\"\ncp $PWD/$b $HOME/$b || echo \"Failed to move the new certificate, do I have root?\"\nsed -i '' \"s~ssl_verify: true~$c~\" $HOME/$a ||  sed -i '' \"s~ssl_verify: True~$c~\" $HOME/$a || echo \"Failed to write to conda config! Do I have root?\"\n# Here, not only is sed different on macos than linux or other bash systems, \n# but it also needs the double quotes in order to expand the $b option.\n# You will also notice that i have used '~' as the seporator, this is because my variables\n# have slashes in them\necho \"Patched Both successfully!\" \n```\n","source":"_posts/Making-a-bash-script-to-fix-a-minor-annoyance.md","raw":"---\ntitle: Making a bash script to fix a minor annoyance\ndate: 2021-11-26 09:37:31\ntags: bash, MacOS, Anaconda, Conda, Python, Linux\n---\nSo, it turns out, if you try and run pip while in my schools network, it recognises a self signed ssl certificate and refuses to connect due to security concerns, forcing us to do`pip install [package] --trusted-host pypi.org --trusted-host files.pythonhosted.org` every single time we want to install a package, which is really annoying. So, why not fix this?\n\nIt turns out pip has a semi-universal config system, meaning that I can simply quickly shop up a script to permanently trust specific hosts. Turns out there are 3 'levels' of config file ([See here](https://pip.pypa.io/en/stable/topics/configuration/) for the full docs), that load in this order, overwriting eachother:\n\n- Enviroment Variable - Always overwrites everything else\n  \n- Global (All users on system) - Only overwrites User and Global\n  \n- User (just the current user) - Only overwrites Site\n  \n- Site (per enviroment) - Cannot overwrite\n  \n\nNow ideally, I'd write to the *Enviroment Variable*, to prevent a user accidently messing up the fix, however, I want this solution to work for all users, and writing to the Env Var seems to require admin permissions, so I'll settle for the Global config file (`/Library/Application Support/pip/pip.conf` on MacOS).\n\nSo by simply doing\n\n```bash\nmkdir -p /Library/Application\\ Support/pip && printf \"%s\\n\" \"[global]\" \"trusted-host = pypi.python.org\" \"               pypi.org\" \"               files.pythonhosted.org\" > /Library/Application\\ Support/pip/pip.conf || echo \"Failed to create conf file, please run with root permissions and try again\"\n```\n\nI can write the correct config options.\n\nLets break this down, first I do `mkdir -p`, making a new directory, with intermediate folders automatically being created if needed (thus the `-p` option). After that, if the folder creation runs successfully, print the following string:\n\n```\n[global]\n    trusted-host = pypi.python.org \n                   pypi.org \n                   files.pythonhosted.org\n```\n\nAnd then output it to pip.conf (using the `>` redirection character), else if it fails (`||`), then print an error msg.\n\nOk, so now pip is fixed, but theres still 1 annoying issue, anaconda never likes to start up while connected to wifi, on this specific network. To figure this out, I simply opened wireshark before opening anaconda, and tried to figure out what was going wrong.\n\nTurns out, it tries to call home to see if there are any updates avalible, however, if the server does not respond for any reason (say for example, an ssl certificate being self signed and causing an error), it has an insanely long timeout period.\n\nSo, let's fix this!\n\nThe first thing I did, was try to see if there was any ssl documentation, turns out, [there is!](https://docs.anaconda.com/anaconda-repository/admin-guide/install/config/config-reference/#ssl-options) So, all I needed to do, was make a new certificate, append my schools self signed certificate, and I'd be home free!\n\nEasier said than done it turns out...\n\nFirst, I had to download the current, full ssl certificate, I opted to use curl for this:\n\n`curl https://curl.se/ca/cacert.pem -o $PWD/.conda.ssl.pem`\n\nAfter downloading it, I next had to fetch woodleighs certificate... once again, easier said than done!\n\nTo do this, I ended up using the fantastic `openssl` client's feature of being able to see the certificates you send and recieve.\n\nThis is the line i came up with:\n\n```bash\nopenssl s_client -showcerts -servername \"curl.haxx.se\" -connect curl.haxx.se:443 | pcregrep -M -e \"----.*(\\n.*){19}\" | pcregrep -M -v -e \"---\\nServer certificate\" >> $b || echo \"Failed to append to new certificate\"\n```\n\nNow, how does that work?\n\nGetting into the openssl `man` page (which is ***STUPID*** long BTW), we can see the `s_client` option does the following:\n\n```plaintext\nThe s_client command implements a generic SSL/TLS client which connects to a remote host using SSL/TLS.\n\n     If a connection is established with an SSL server, any data received from the server is displayed and\n     any key presses will be sent to the server.\n```\n\nSo next, we add the `-showcerts` and `-servername` options, opting to connect to the curl page (ironic, I know), followed by the `-connect` option, specifying what port we would like to connect to in specific (443 for https).\n\nI then pipe (`|`) this to a bunch of pcregrep statements, designed to filter down the last certificate, which, conveniantly, is the school one. I then append (`>>`) that to the certificate sheet (here, stored in the $b variable), otherwise, echo an error command.\n\nI then copy the file to a new location for permanent storage, in particular the $HOME location, named with a dot `.` to make sure the file is non-visable.\n\nI then run 2 sed commands\n\n```bash\nsed -i '' \"s~ssl_verify: true~$c~\" $HOME/$a ||  sed -i '' \"s~ssl_verify: True~$c~\" $HOME/$a\n```\n\nThis repleaces the content `ssl_verify: true` (the default value) with the directory to my custom certificate, basically saying \"use that certificate for ssl verification\". I also run another copy of this searching for a capital T in 'true' just be to sure.\n\nAfter that, everything is patched and the follow should have been fixed:\n\n- Anaconda taking forever to load when connected to the internet\n  \n- Pip Needing an overly complex install cmd (now it should just be `pip install package`)\n  \n\nI am currently investigating the occasional nature of curl to fail, ironically due to a self signed ssl certificate, although I may simply switch to wget instead to avoid this issue.\n\nOn top of that, some installations of anaconda seem to be in different places, without any rhyme or reason, and i'll be investigating this further soon.\n\nThe full script:\n\n```bash\n#!/bin/bash\n\n# This script patches both pip and anaconda to not give self-signed cert errors while maintaining an ssl connection.\n# Made by Jake Aronleigh - contact me at: ghostoverflow256@gmail.com\n\necho \"Patching pip first\"\n# This patch tells the pip program to always trust the needed sites through a global config file. \n# The loading order for config files is as follows:\n# Path specified by the PIP_CONFIG_FILE enviroment variable (couldnt get that to work without root)\n# Global - /Library/Application Support/pip/pip.conf\n# User - $HOME/Library/Application Support/pip/pip.conf OR $HOME/.config/pip/pip.conf\n# Site - $VIRTUAL_ENV/pip.conf\n\n# Here I'm using the Global method. It would be better to use the PIP_CONFIG_FILE method,\n# however to edit the enviroemtn variables I would need root access. \n# This creates an issue of authentication, meaning I would be unable to portably pack this \n# Application without giving EVERY user some sort of admin role, which is not wise. \nmkdir -p /Library/Application\\ Support/pip &&  printf \"%s\\n\" \"[global]\" \"trusted-host = pypi.python.org\" \"               pypi.org\" \"               files.pythonhosted.org\" > /Library/Application\\ Support/pip/pip.conf || echo \"Failed to create conf file, please run with root permissions and try again\"\necho \"Patched pip, attempting anaconda\"\n\n# The way this patch works is it gets the file for ssl certificates, then patches in the\n# woodleigh ssl certs to make sure anaconda doesn't think it's being attacked by a Man-in-the-middle attack. \nb=.conda.ssl.pem\nc=\"ssl_verify: $HOME/$b\"\na=.continuum/anaconda-client/config.yaml\nmv \"$PWD/$b\" \"$PWD/old_certs/$b\" || echo \"Couldn't move old file, assuming this is the first time running this patch\"\ncurl https://curl.se/ca/cacert.pem -o $PWD/$b || echo \"Curl failed, couldn't get default certificate!\" # This sometimes doesnt work - Why?\necho quit | openssl s_client -showcerts -servername \"curl.haxx.se\" -connect curl.haxx.se:443 | pcregrep -M -e \"----.*(\\n.*){19}\" | pcregrep -M -v -e \"---\\nServer certificate\" >> $b || echo \"Failed to append to new certificate\"\ncp $PWD/$b $HOME/$b || echo \"Failed to move the new certificate, do I have root?\"\nsed -i '' \"s~ssl_verify: true~$c~\" $HOME/$a ||  sed -i '' \"s~ssl_verify: True~$c~\" $HOME/$a || echo \"Failed to write to conda config! Do I have root?\"\n# Here, not only is sed different on macos than linux or other bash systems, \n# but it also needs the double quotes in order to expand the $b option.\n# You will also notice that i have used '~' as the seporator, this is because my variables\n# have slashes in them\necho \"Patched Both successfully!\" \n```\n","slug":"Making-a-bash-script-to-fix-a-minor-annoyance","published":1,"updated":"2021-11-30T23:42:39.704Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6eduwje000cookg5e2yacv5","content":"<p>So, it turns out, if you try and run pip while in my schools network, it recognises a self signed ssl certificate and refuses to connect due to security concerns, forcing us to do<code>pip install [package] --trusted-host pypi.org --trusted-host files.pythonhosted.org</code> every single time we want to install a package, which is really annoying. So, why not fix this?</p>\n<p>It turns out pip has a semi-universal config system, meaning that I can simply quickly shop up a script to permanently trust specific hosts. Turns out there are 3 ‘levels’ of config file (<a href=\"https://pip.pypa.io/en/stable/topics/configuration/\">See here</a> for the full docs), that load in this order, overwriting eachother:</p>\n<ul>\n<li>Enviroment Variable - Always overwrites everything else</li>\n<li>Global (All users on system) - Only overwrites User and Global</li>\n<li>User (just the current user) - Only overwrites Site</li>\n<li>Site (per enviroment) - Cannot overwrite</li>\n</ul>\n<p>Now ideally, I’d write to the <em>Enviroment Variable</em>, to prevent a user accidently messing up the fix, however, I want this solution to work for all users, and writing to the Env Var seems to require admin permissions, so I’ll settle for the Global config file (<code>/Library/Application Support/pip/pip.conf</code> on MacOS).</p>\n<p>So by simply doing</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /Library/Application\\ Support/pip &amp;&amp; <span class=\"built_in\">printf</span> <span class=\"string\">&quot;%s\\n&quot;</span> <span class=\"string\">&quot;[global]&quot;</span> <span class=\"string\">&quot;trusted-host = pypi.python.org&quot;</span> <span class=\"string\">&quot;               pypi.org&quot;</span> <span class=\"string\">&quot;               files.pythonhosted.org&quot;</span> &gt; /Library/Application\\ Support/pip/pip.conf || <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Failed to create conf file, please run with root permissions and try again&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>I can write the correct config options.</p>\n<p>Lets break this down, first I do <code>mkdir -p</code>, making a new directory, with intermediate folders automatically being created if needed (thus the <code>-p</code> option). After that, if the folder creation runs successfully, print the following string:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[global]</span><br><span class=\"line\">    trusted-host = pypi.python.org </span><br><span class=\"line\">                   pypi.org </span><br><span class=\"line\">                   files.pythonhosted.org</span><br></pre></td></tr></table></figure>\n\n<p>And then output it to pip.conf (using the <code>&gt;</code> redirection character), else if it fails (<code>||</code>), then print an error msg.</p>\n<p>Ok, so now pip is fixed, but theres still 1 annoying issue, anaconda never likes to start up while connected to wifi, on this specific network. To figure this out, I simply opened wireshark before opening anaconda, and tried to figure out what was going wrong.</p>\n<p>Turns out, it tries to call home to see if there are any updates avalible, however, if the server does not respond for any reason (say for example, an ssl certificate being self signed and causing an error), it has an insanely long timeout period.</p>\n<p>So, let’s fix this!</p>\n<p>The first thing I did, was try to see if there was any ssl documentation, turns out, <a href=\"https://docs.anaconda.com/anaconda-repository/admin-guide/install/config/config-reference/#ssl-options\">there is!</a> So, all I needed to do, was make a new certificate, append my schools self signed certificate, and I’d be home free!</p>\n<p>Easier said than done it turns out…</p>\n<p>First, I had to download the current, full ssl certificate, I opted to use curl for this:</p>\n<p><code>curl https://curl.se/ca/cacert.pem -o $PWD/.conda.ssl.pem</code></p>\n<p>After downloading it, I next had to fetch woodleighs certificate… once again, easier said than done!</p>\n<p>To do this, I ended up using the fantastic <code>openssl</code> client’s feature of being able to see the certificates you send and recieve.</p>\n<p>This is the line i came up with:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl s_client -showcerts -servername <span class=\"string\">&quot;curl.haxx.se&quot;</span> -connect curl.haxx.se:443 | pcregrep -M -e <span class=\"string\">&quot;----.*(\\n.*)&#123;19&#125;&quot;</span> | pcregrep -M -v -e <span class=\"string\">&quot;---\\nServer certificate&quot;</span> &gt;&gt; <span class=\"variable\">$b</span> || <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Failed to append to new certificate&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>Now, how does that work?</p>\n<p>Getting into the openssl <code>man</code> page (which is <em><strong>STUPID</strong></em> long BTW), we can see the <code>s_client</code> option does the following:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The s_client command implements a generic SSL/TLS client which connects to a remote host using SSL/TLS.</span><br><span class=\"line\"></span><br><span class=\"line\">     If a connection is established with an SSL server, any data received from the server is displayed and</span><br><span class=\"line\">     any key presses will be sent to the server.</span><br></pre></td></tr></table></figure>\n\n<p>So next, we add the <code>-showcerts</code> and <code>-servername</code> options, opting to connect to the curl page (ironic, I know), followed by the <code>-connect</code> option, specifying what port we would like to connect to in specific (443 for https).</p>\n<p>I then pipe (<code>|</code>) this to a bunch of pcregrep statements, designed to filter down the last certificate, which, conveniantly, is the school one. I then append (<code>&gt;&gt;</code>) that to the certificate sheet (here, stored in the $b variable), otherwise, echo an error command.</p>\n<p>I then copy the file to a new location for permanent storage, in particular the $HOME location, named with a dot <code>.</code> to make sure the file is non-visable.</p>\n<p>I then run 2 sed commands</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed -i <span class=\"string\">&#x27;&#x27;</span> <span class=\"string\">&quot;s~ssl_verify: true~<span class=\"variable\">$c</span>~&quot;</span> <span class=\"variable\">$HOME</span>/<span class=\"variable\">$a</span> ||  sed -i <span class=\"string\">&#x27;&#x27;</span> <span class=\"string\">&quot;s~ssl_verify: True~<span class=\"variable\">$c</span>~&quot;</span> <span class=\"variable\">$HOME</span>/<span class=\"variable\">$a</span></span><br></pre></td></tr></table></figure>\n\n<p>This repleaces the content <code>ssl_verify: true</code> (the default value) with the directory to my custom certificate, basically saying “use that certificate for ssl verification”. I also run another copy of this searching for a capital T in ‘true’ just be to sure.</p>\n<p>After that, everything is patched and the follow should have been fixed:</p>\n<ul>\n<li>Anaconda taking forever to load when connected to the internet</li>\n<li>Pip Needing an overly complex install cmd (now it should just be <code>pip install package</code>)</li>\n</ul>\n<p>I am currently investigating the occasional nature of curl to fail, ironically due to a self signed ssl certificate, although I may simply switch to wget instead to avoid this issue.</p>\n<p>On top of that, some installations of anaconda seem to be in different places, without any rhyme or reason, and i’ll be investigating this further soon.</p>\n<p>The full script:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># This script patches both pip and anaconda to not give self-signed cert errors while maintaining an ssl connection.</span></span><br><span class=\"line\"><span class=\"comment\"># Made by Jake Aronleigh - contact me at: ghostoverflow256@gmail.com</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;Patching pip first&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># This patch tells the pip program to always trust the needed sites through a global config file. </span></span><br><span class=\"line\"><span class=\"comment\"># The loading order for config files is as follows:</span></span><br><span class=\"line\"><span class=\"comment\"># Path specified by the PIP_CONFIG_FILE enviroment variable (couldnt get that to work without root)</span></span><br><span class=\"line\"><span class=\"comment\"># Global - /Library/Application Support/pip/pip.conf</span></span><br><span class=\"line\"><span class=\"comment\"># User - $HOME/Library/Application Support/pip/pip.conf OR $HOME/.config/pip/pip.conf</span></span><br><span class=\"line\"><span class=\"comment\"># Site - $VIRTUAL_ENV/pip.conf</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Here I&#x27;m using the Global method. It would be better to use the PIP_CONFIG_FILE method,</span></span><br><span class=\"line\"><span class=\"comment\"># however to edit the enviroemtn variables I would need root access. </span></span><br><span class=\"line\"><span class=\"comment\"># This creates an issue of authentication, meaning I would be unable to portably pack this </span></span><br><span class=\"line\"><span class=\"comment\"># Application without giving EVERY user some sort of admin role, which is not wise. </span></span><br><span class=\"line\">mkdir -p /Library/Application\\ Support/pip &amp;&amp;  <span class=\"built_in\">printf</span> <span class=\"string\">&quot;%s\\n&quot;</span> <span class=\"string\">&quot;[global]&quot;</span> <span class=\"string\">&quot;trusted-host = pypi.python.org&quot;</span> <span class=\"string\">&quot;               pypi.org&quot;</span> <span class=\"string\">&quot;               files.pythonhosted.org&quot;</span> &gt; /Library/Application\\ Support/pip/pip.conf || <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Failed to create conf file, please run with root permissions and try again&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;Patched pip, attempting anaconda&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The way this patch works is it gets the file for ssl certificates, then patches in the</span></span><br><span class=\"line\"><span class=\"comment\"># woodleigh ssl certs to make sure anaconda doesn&#x27;t think it&#x27;s being attacked by a Man-in-the-middle attack. </span></span><br><span class=\"line\">b=.conda.ssl.pem</span><br><span class=\"line\">c=<span class=\"string\">&quot;ssl_verify: <span class=\"variable\">$HOME</span>/<span class=\"variable\">$b</span>&quot;</span></span><br><span class=\"line\">a=.continuum/anaconda-client/config.yaml</span><br><span class=\"line\">mv <span class=\"string\">&quot;<span class=\"variable\">$PWD</span>/<span class=\"variable\">$b</span>&quot;</span> <span class=\"string\">&quot;<span class=\"variable\">$PWD</span>/old_certs/<span class=\"variable\">$b</span>&quot;</span> || <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Couldn&#x27;t move old file, assuming this is the first time running this patch&quot;</span></span><br><span class=\"line\">curl https://curl.se/ca/cacert.pem -o <span class=\"variable\">$PWD</span>/<span class=\"variable\">$b</span> || <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Curl failed, couldn&#x27;t get default certificate!&quot;</span> <span class=\"comment\"># This sometimes doesnt work - Why?</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> quit | openssl s_client -showcerts -servername <span class=\"string\">&quot;curl.haxx.se&quot;</span> -connect curl.haxx.se:443 | pcregrep -M -e <span class=\"string\">&quot;----.*(\\n.*)&#123;19&#125;&quot;</span> | pcregrep -M -v -e <span class=\"string\">&quot;---\\nServer certificate&quot;</span> &gt;&gt; <span class=\"variable\">$b</span> || <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Failed to append to new certificate&quot;</span></span><br><span class=\"line\">cp <span class=\"variable\">$PWD</span>/<span class=\"variable\">$b</span> <span class=\"variable\">$HOME</span>/<span class=\"variable\">$b</span> || <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Failed to move the new certificate, do I have root?&quot;</span></span><br><span class=\"line\">sed -i <span class=\"string\">&#x27;&#x27;</span> <span class=\"string\">&quot;s~ssl_verify: true~<span class=\"variable\">$c</span>~&quot;</span> <span class=\"variable\">$HOME</span>/<span class=\"variable\">$a</span> ||  sed -i <span class=\"string\">&#x27;&#x27;</span> <span class=\"string\">&quot;s~ssl_verify: True~<span class=\"variable\">$c</span>~&quot;</span> <span class=\"variable\">$HOME</span>/<span class=\"variable\">$a</span> || <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Failed to write to conda config! Do I have root?&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># Here, not only is sed different on macos than linux or other bash systems, </span></span><br><span class=\"line\"><span class=\"comment\"># but it also needs the double quotes in order to expand the $b option.</span></span><br><span class=\"line\"><span class=\"comment\"># You will also notice that i have used &#x27;~&#x27; as the seporator, this is because my variables</span></span><br><span class=\"line\"><span class=\"comment\"># have slashes in them</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;Patched Both successfully!&quot;</span> </span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>So, it turns out, if you try and run pip while in my schools network, it recognises a self signed ssl certificate and refuses to connect due to security concerns, forcing us to do<code>pip install [package] --trusted-host pypi.org --trusted-host files.pythonhosted.org</code> every single time we want to install a package, which is really annoying. So, why not fix this?</p>\n<p>It turns out pip has a semi-universal config system, meaning that I can simply quickly shop up a script to permanently trust specific hosts. Turns out there are 3 ‘levels’ of config file (<a href=\"https://pip.pypa.io/en/stable/topics/configuration/\">See here</a> for the full docs), that load in this order, overwriting eachother:</p>\n<ul>\n<li>Enviroment Variable - Always overwrites everything else</li>\n<li>Global (All users on system) - Only overwrites User and Global</li>\n<li>User (just the current user) - Only overwrites Site</li>\n<li>Site (per enviroment) - Cannot overwrite</li>\n</ul>\n<p>Now ideally, I’d write to the <em>Enviroment Variable</em>, to prevent a user accidently messing up the fix, however, I want this solution to work for all users, and writing to the Env Var seems to require admin permissions, so I’ll settle for the Global config file (<code>/Library/Application Support/pip/pip.conf</code> on MacOS).</p>\n<p>So by simply doing</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /Library/Application\\ Support/pip &amp;&amp; <span class=\"built_in\">printf</span> <span class=\"string\">&quot;%s\\n&quot;</span> <span class=\"string\">&quot;[global]&quot;</span> <span class=\"string\">&quot;trusted-host = pypi.python.org&quot;</span> <span class=\"string\">&quot;               pypi.org&quot;</span> <span class=\"string\">&quot;               files.pythonhosted.org&quot;</span> &gt; /Library/Application\\ Support/pip/pip.conf || <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Failed to create conf file, please run with root permissions and try again&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>I can write the correct config options.</p>\n<p>Lets break this down, first I do <code>mkdir -p</code>, making a new directory, with intermediate folders automatically being created if needed (thus the <code>-p</code> option). After that, if the folder creation runs successfully, print the following string:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[global]</span><br><span class=\"line\">    trusted-host = pypi.python.org </span><br><span class=\"line\">                   pypi.org </span><br><span class=\"line\">                   files.pythonhosted.org</span><br></pre></td></tr></table></figure>\n\n<p>And then output it to pip.conf (using the <code>&gt;</code> redirection character), else if it fails (<code>||</code>), then print an error msg.</p>\n<p>Ok, so now pip is fixed, but theres still 1 annoying issue, anaconda never likes to start up while connected to wifi, on this specific network. To figure this out, I simply opened wireshark before opening anaconda, and tried to figure out what was going wrong.</p>\n<p>Turns out, it tries to call home to see if there are any updates avalible, however, if the server does not respond for any reason (say for example, an ssl certificate being self signed and causing an error), it has an insanely long timeout period.</p>\n<p>So, let’s fix this!</p>\n<p>The first thing I did, was try to see if there was any ssl documentation, turns out, <a href=\"https://docs.anaconda.com/anaconda-repository/admin-guide/install/config/config-reference/#ssl-options\">there is!</a> So, all I needed to do, was make a new certificate, append my schools self signed certificate, and I’d be home free!</p>\n<p>Easier said than done it turns out…</p>\n<p>First, I had to download the current, full ssl certificate, I opted to use curl for this:</p>\n<p><code>curl https://curl.se/ca/cacert.pem -o $PWD/.conda.ssl.pem</code></p>\n<p>After downloading it, I next had to fetch woodleighs certificate… once again, easier said than done!</p>\n<p>To do this, I ended up using the fantastic <code>openssl</code> client’s feature of being able to see the certificates you send and recieve.</p>\n<p>This is the line i came up with:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl s_client -showcerts -servername <span class=\"string\">&quot;curl.haxx.se&quot;</span> -connect curl.haxx.se:443 | pcregrep -M -e <span class=\"string\">&quot;----.*(\\n.*)&#123;19&#125;&quot;</span> | pcregrep -M -v -e <span class=\"string\">&quot;---\\nServer certificate&quot;</span> &gt;&gt; <span class=\"variable\">$b</span> || <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Failed to append to new certificate&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>Now, how does that work?</p>\n<p>Getting into the openssl <code>man</code> page (which is <em><strong>STUPID</strong></em> long BTW), we can see the <code>s_client</code> option does the following:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The s_client command implements a generic SSL/TLS client which connects to a remote host using SSL/TLS.</span><br><span class=\"line\"></span><br><span class=\"line\">     If a connection is established with an SSL server, any data received from the server is displayed and</span><br><span class=\"line\">     any key presses will be sent to the server.</span><br></pre></td></tr></table></figure>\n\n<p>So next, we add the <code>-showcerts</code> and <code>-servername</code> options, opting to connect to the curl page (ironic, I know), followed by the <code>-connect</code> option, specifying what port we would like to connect to in specific (443 for https).</p>\n<p>I then pipe (<code>|</code>) this to a bunch of pcregrep statements, designed to filter down the last certificate, which, conveniantly, is the school one. I then append (<code>&gt;&gt;</code>) that to the certificate sheet (here, stored in the $b variable), otherwise, echo an error command.</p>\n<p>I then copy the file to a new location for permanent storage, in particular the $HOME location, named with a dot <code>.</code> to make sure the file is non-visable.</p>\n<p>I then run 2 sed commands</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed -i <span class=\"string\">&#x27;&#x27;</span> <span class=\"string\">&quot;s~ssl_verify: true~<span class=\"variable\">$c</span>~&quot;</span> <span class=\"variable\">$HOME</span>/<span class=\"variable\">$a</span> ||  sed -i <span class=\"string\">&#x27;&#x27;</span> <span class=\"string\">&quot;s~ssl_verify: True~<span class=\"variable\">$c</span>~&quot;</span> <span class=\"variable\">$HOME</span>/<span class=\"variable\">$a</span></span><br></pre></td></tr></table></figure>\n\n<p>This repleaces the content <code>ssl_verify: true</code> (the default value) with the directory to my custom certificate, basically saying “use that certificate for ssl verification”. I also run another copy of this searching for a capital T in ‘true’ just be to sure.</p>\n<p>After that, everything is patched and the follow should have been fixed:</p>\n<ul>\n<li>Anaconda taking forever to load when connected to the internet</li>\n<li>Pip Needing an overly complex install cmd (now it should just be <code>pip install package</code>)</li>\n</ul>\n<p>I am currently investigating the occasional nature of curl to fail, ironically due to a self signed ssl certificate, although I may simply switch to wget instead to avoid this issue.</p>\n<p>On top of that, some installations of anaconda seem to be in different places, without any rhyme or reason, and i’ll be investigating this further soon.</p>\n<p>The full script:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># This script patches both pip and anaconda to not give self-signed cert errors while maintaining an ssl connection.</span></span><br><span class=\"line\"><span class=\"comment\"># Made by Jake Aronleigh - contact me at: ghostoverflow256@gmail.com</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;Patching pip first&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># This patch tells the pip program to always trust the needed sites through a global config file. </span></span><br><span class=\"line\"><span class=\"comment\"># The loading order for config files is as follows:</span></span><br><span class=\"line\"><span class=\"comment\"># Path specified by the PIP_CONFIG_FILE enviroment variable (couldnt get that to work without root)</span></span><br><span class=\"line\"><span class=\"comment\"># Global - /Library/Application Support/pip/pip.conf</span></span><br><span class=\"line\"><span class=\"comment\"># User - $HOME/Library/Application Support/pip/pip.conf OR $HOME/.config/pip/pip.conf</span></span><br><span class=\"line\"><span class=\"comment\"># Site - $VIRTUAL_ENV/pip.conf</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Here I&#x27;m using the Global method. It would be better to use the PIP_CONFIG_FILE method,</span></span><br><span class=\"line\"><span class=\"comment\"># however to edit the enviroemtn variables I would need root access. </span></span><br><span class=\"line\"><span class=\"comment\"># This creates an issue of authentication, meaning I would be unable to portably pack this </span></span><br><span class=\"line\"><span class=\"comment\"># Application without giving EVERY user some sort of admin role, which is not wise. </span></span><br><span class=\"line\">mkdir -p /Library/Application\\ Support/pip &amp;&amp;  <span class=\"built_in\">printf</span> <span class=\"string\">&quot;%s\\n&quot;</span> <span class=\"string\">&quot;[global]&quot;</span> <span class=\"string\">&quot;trusted-host = pypi.python.org&quot;</span> <span class=\"string\">&quot;               pypi.org&quot;</span> <span class=\"string\">&quot;               files.pythonhosted.org&quot;</span> &gt; /Library/Application\\ Support/pip/pip.conf || <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Failed to create conf file, please run with root permissions and try again&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;Patched pip, attempting anaconda&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># The way this patch works is it gets the file for ssl certificates, then patches in the</span></span><br><span class=\"line\"><span class=\"comment\"># woodleigh ssl certs to make sure anaconda doesn&#x27;t think it&#x27;s being attacked by a Man-in-the-middle attack. </span></span><br><span class=\"line\">b=.conda.ssl.pem</span><br><span class=\"line\">c=<span class=\"string\">&quot;ssl_verify: <span class=\"variable\">$HOME</span>/<span class=\"variable\">$b</span>&quot;</span></span><br><span class=\"line\">a=.continuum/anaconda-client/config.yaml</span><br><span class=\"line\">mv <span class=\"string\">&quot;<span class=\"variable\">$PWD</span>/<span class=\"variable\">$b</span>&quot;</span> <span class=\"string\">&quot;<span class=\"variable\">$PWD</span>/old_certs/<span class=\"variable\">$b</span>&quot;</span> || <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Couldn&#x27;t move old file, assuming this is the first time running this patch&quot;</span></span><br><span class=\"line\">curl https://curl.se/ca/cacert.pem -o <span class=\"variable\">$PWD</span>/<span class=\"variable\">$b</span> || <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Curl failed, couldn&#x27;t get default certificate!&quot;</span> <span class=\"comment\"># This sometimes doesnt work - Why?</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> quit | openssl s_client -showcerts -servername <span class=\"string\">&quot;curl.haxx.se&quot;</span> -connect curl.haxx.se:443 | pcregrep -M -e <span class=\"string\">&quot;----.*(\\n.*)&#123;19&#125;&quot;</span> | pcregrep -M -v -e <span class=\"string\">&quot;---\\nServer certificate&quot;</span> &gt;&gt; <span class=\"variable\">$b</span> || <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Failed to append to new certificate&quot;</span></span><br><span class=\"line\">cp <span class=\"variable\">$PWD</span>/<span class=\"variable\">$b</span> <span class=\"variable\">$HOME</span>/<span class=\"variable\">$b</span> || <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Failed to move the new certificate, do I have root?&quot;</span></span><br><span class=\"line\">sed -i <span class=\"string\">&#x27;&#x27;</span> <span class=\"string\">&quot;s~ssl_verify: true~<span class=\"variable\">$c</span>~&quot;</span> <span class=\"variable\">$HOME</span>/<span class=\"variable\">$a</span> ||  sed -i <span class=\"string\">&#x27;&#x27;</span> <span class=\"string\">&quot;s~ssl_verify: True~<span class=\"variable\">$c</span>~&quot;</span> <span class=\"variable\">$HOME</span>/<span class=\"variable\">$a</span> || <span class=\"built_in\">echo</span> <span class=\"string\">&quot;Failed to write to conda config! Do I have root?&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># Here, not only is sed different on macos than linux or other bash systems, </span></span><br><span class=\"line\"><span class=\"comment\"># but it also needs the double quotes in order to expand the $b option.</span></span><br><span class=\"line\"><span class=\"comment\"># You will also notice that i have used &#x27;~&#x27; as the seporator, this is because my variables</span></span><br><span class=\"line\"><span class=\"comment\"># have slashes in them</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;Patched Both successfully!&quot;</span> </span><br></pre></td></tr></table></figure>\n"},{"title":"Linux Aliases","date":"2021-09-25T03:56:31.000Z","_content":"In nearly all Linux distro’s, you can set aliases. I thought I’d share what ones I use at the moment!\n\n```bash\nalias get=\"sudo apt-get install\"\nalias lt=\"ls -la --human-readable --size -1 -S --classify\"\nalias count='find . -type f | wc -l'\nalias editaliases=\"sudo gedit /home/${LOGNAME}/.bash_aliases\"\nalias restart='sudo reboot'\nalias mime='file -b --mime-type'\n```\n\nIn order to make sure this gets enforced every terminal session, I simply add this to my bashrc file:\n\n```bash\nAliasContents=`cat ./.bash_aliases`\necho \"Current aliases are: $AliasContents\"\nWhere .bash_aliases simply contains the above aliases!\n```\n","source":"_posts/Linux-Aliases.md","raw":"---\ntitle: Linux Aliases\ndate: 2021-09-25 13:56:31\ntags:\n---\nIn nearly all Linux distro’s, you can set aliases. I thought I’d share what ones I use at the moment!\n\n```bash\nalias get=\"sudo apt-get install\"\nalias lt=\"ls -la --human-readable --size -1 -S --classify\"\nalias count='find . -type f | wc -l'\nalias editaliases=\"sudo gedit /home/${LOGNAME}/.bash_aliases\"\nalias restart='sudo reboot'\nalias mime='file -b --mime-type'\n```\n\nIn order to make sure this gets enforced every terminal session, I simply add this to my bashrc file:\n\n```bash\nAliasContents=`cat ./.bash_aliases`\necho \"Current aliases are: $AliasContents\"\nWhere .bash_aliases simply contains the above aliases!\n```\n","slug":"Linux-Aliases","published":1,"updated":"2021-11-25T02:57:32.581Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6eduwjf000fookg2dqo0om3","content":"<p>In nearly all Linux distro’s, you can set aliases. I thought I’d share what ones I use at the moment!</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">alias</span> get=<span class=\"string\">&quot;sudo apt-get install&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> lt=<span class=\"string\">&quot;ls -la --human-readable --size -1 -S --classify&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> count=<span class=\"string\">&#x27;find . -type f | wc -l&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> editaliases=<span class=\"string\">&quot;sudo gedit /home/<span class=\"variable\">$&#123;LOGNAME&#125;</span>/.bash_aliases&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> restart=<span class=\"string\">&#x27;sudo reboot&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> mime=<span class=\"string\">&#x27;file -b --mime-type&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>In order to make sure this gets enforced every terminal session, I simply add this to my bashrc file:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AliasContents=`cat ./.bash_aliases`</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;Current aliases are: <span class=\"variable\">$AliasContents</span>&quot;</span></span><br><span class=\"line\">Where .bash_aliases simply contains the above aliases!</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>In nearly all Linux distro’s, you can set aliases. I thought I’d share what ones I use at the moment!</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">alias</span> get=<span class=\"string\">&quot;sudo apt-get install&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> lt=<span class=\"string\">&quot;ls -la --human-readable --size -1 -S --classify&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> count=<span class=\"string\">&#x27;find . -type f | wc -l&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> editaliases=<span class=\"string\">&quot;sudo gedit /home/<span class=\"variable\">$&#123;LOGNAME&#125;</span>/.bash_aliases&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> restart=<span class=\"string\">&#x27;sudo reboot&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">alias</span> mime=<span class=\"string\">&#x27;file -b --mime-type&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>In order to make sure this gets enforced every terminal session, I simply add this to my bashrc file:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AliasContents=`cat ./.bash_aliases`</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;Current aliases are: <span class=\"variable\">$AliasContents</span>&quot;</span></span><br><span class=\"line\">Where .bash_aliases simply contains the above aliases!</span><br></pre></td></tr></table></figure>\n"},{"title":"Turns out the COVID-19 vaccine certificate is easily forged","date":"2021-10-20T21:43:20.000Z","_content":"So it turns out, that the vaccine certificate that is given to Australian citizens is extremely easy to forge, only requiring a basic PDF editor, like [LibreOffice Draw](https://www.libreoffice.org/discover/draw/), a completely free and open source program, to simply edit the PDF. \n\nAfter loading the PDF, all a potential forgery needs to do is to format the watermark in a special way. \n\nTo showcase this, I simply decided to make my own \"totally legitimate\" copy:\n![Fake Vaccine Passport](/blog/images/totallylegit_fake.png)\n\nOnce again, the goverment has failed at a basic technological hurdle, as fixing this would only require that they, instead of giving a PDF, give an image, which will not preserve the layering, making it harder to edit the document. \n\nThat is of course ignoring the issue that is the fact that they also didn't cover the most important fields with their watermark, being the DoB and name, most of the IHI, and the document number. Of course this would be verifably false by someone with access to the medicare internal systems, however given the goverments objective of only having double vaccinated people out in the public, this would only require a laughable amount of social engineering to work. \n","source":"_posts/Turns-out-the-COVID-19-vaccine-certificate-is-easily-forged.md","raw":"---\ntitle: Turns out the COVID-19 vaccine certificate is easily forged\ndate: 2021-10-21 08:43:20\ntags: COVID-19, coronavirus\n---\nSo it turns out, that the vaccine certificate that is given to Australian citizens is extremely easy to forge, only requiring a basic PDF editor, like [LibreOffice Draw](https://www.libreoffice.org/discover/draw/), a completely free and open source program, to simply edit the PDF. \n\nAfter loading the PDF, all a potential forgery needs to do is to format the watermark in a special way. \n\nTo showcase this, I simply decided to make my own \"totally legitimate\" copy:\n![Fake Vaccine Passport](/blog/images/totallylegit_fake.png)\n\nOnce again, the goverment has failed at a basic technological hurdle, as fixing this would only require that they, instead of giving a PDF, give an image, which will not preserve the layering, making it harder to edit the document. \n\nThat is of course ignoring the issue that is the fact that they also didn't cover the most important fields with their watermark, being the DoB and name, most of the IHI, and the document number. Of course this would be verifably false by someone with access to the medicare internal systems, however given the goverments objective of only having double vaccinated people out in the public, this would only require a laughable amount of social engineering to work. \n","slug":"Turns-out-the-COVID-19-vaccine-certificate-is-easily-forged","published":1,"updated":"2022-12-02T00:39:35.856Z","_id":"cl6eduwjg000hookg3csi34wq","comments":1,"layout":"post","photos":[],"link":"","content":"<p>So it turns out, that the vaccine certificate that is given to Australian citizens is extremely easy to forge, only requiring a basic PDF editor, like <a href=\"https://www.libreoffice.org/discover/draw/\">LibreOffice Draw</a>, a completely free and open source program, to simply edit the PDF. </p>\n<p>After loading the PDF, all a potential forgery needs to do is to format the watermark in a special way. </p>\n<p>To showcase this, I simply decided to make my own “totally legitimate” copy:<br><img src=\"/blog/blog/images/totallylegit_fake.png\" alt=\"Fake Vaccine Passport\"></p>\n<p>Once again, the goverment has failed at a basic technological hurdle, as fixing this would only require that they, instead of giving a PDF, give an image, which will not preserve the layering, making it harder to edit the document. </p>\n<p>That is of course ignoring the issue that is the fact that they also didn’t cover the most important fields with their watermark, being the DoB and name, most of the IHI, and the document number. Of course this would be verifably false by someone with access to the medicare internal systems, however given the goverments objective of only having double vaccinated people out in the public, this would only require a laughable amount of social engineering to work. </p>\n","site":{"data":{}},"excerpt":"","more":"<p>So it turns out, that the vaccine certificate that is given to Australian citizens is extremely easy to forge, only requiring a basic PDF editor, like <a href=\"https://www.libreoffice.org/discover/draw/\">LibreOffice Draw</a>, a completely free and open source program, to simply edit the PDF. </p>\n<p>After loading the PDF, all a potential forgery needs to do is to format the watermark in a special way. </p>\n<p>To showcase this, I simply decided to make my own “totally legitimate” copy:<br><img src=\"/blog/blog/images/totallylegit_fake.png\" alt=\"Fake Vaccine Passport\"></p>\n<p>Once again, the goverment has failed at a basic technological hurdle, as fixing this would only require that they, instead of giving a PDF, give an image, which will not preserve the layering, making it harder to edit the document. </p>\n<p>That is of course ignoring the issue that is the fact that they also didn’t cover the most important fields with their watermark, being the DoB and name, most of the IHI, and the document number. Of course this would be verifably false by someone with access to the medicare internal systems, however given the goverments objective of only having double vaccinated people out in the public, this would only require a laughable amount of social engineering to work. </p>\n"},{"title":"Virgin Media revealed to be storing passwords in plaintext, posts password to customer","date":"2021-11-25T22:39:28.000Z","_content":"In a recent twitter thread detailing the password recovery process be twitter user [_freakyclown\\_](https://twitter.com/_Freakyclown_), the user mentioned multiple fails from the popular airline company, starting the thread with this:\n\n```plaintext\nOk a thread: I have never signed into my @virginmedia account but I \ndid set one up years ago but forgot all the details. I request a \npassword reset. The person on the phone gives me “one last chance” to \nguess what email I used, I get it on the third try!\n```\n\nThis is clearly an issue, as nobody should be granted extra tries on a password login, for any reason, as this clearly enables more brute-force attempts by bad actors, however, it gets even worse.\n\n```plaintext\nI finally get the password reset request actioned, phone \nrepresentative tells me password will be posted to me.. ok weird but I \naccept. Today the post arrives and I shit you not it’s my old \npassword!!!! (I remembered it on sight) So they store the password and \njust posted me it!!\n```\n\nThis is where it gets borderline [illegal](https://www.gov.uk/data-protection) in some countries (namely the UK). This means that Virgin Media stores their passwords in, generously, a reversible encryption standard. This is a dream for any potential hackers, as they don't even need to work to reverse the password hashes with a tool like [hashcat](https://hashcat.net/hashcat/), instead, they can simply export the database and be home free!! On top of this, they ***posted*** it. What. The. Hell. \nThis is clearly absolutely, immeasurably stupid. What's to stop someone from intercepting that mail, opening it, taking a photo of the password, and then re-packing the envelope? Nothing. \nThe geniuses at Virgin Media had an excellent response to this however:\n\n```plaintext\nPosting it to you is secure, as it's illegal to open someone elses mail. ^JGS\n```\n\nWhich is just... wow... it's on the same level of \"If someone's assaulting you, just say no, they can't touch you without your consent\".\nWhat an absolute embarrassment, as even hashing ***without salt*** would be better than this...\n","source":"_posts/Virgin-Media-revealed-to-be-storing-passwords-in-plaintext-posts-password-to-customer.md","raw":"---\ntitle: >-\n  Virgin Media revealed to be storing passwords in plaintext, posts password to\n  customer\ndate: 2021-11-26 09:39:28\ntags: security, cybersecurity, Virgin Media, Virgin, password, plaintext, password\n---\nIn a recent twitter thread detailing the password recovery process be twitter user [_freakyclown\\_](https://twitter.com/_Freakyclown_), the user mentioned multiple fails from the popular airline company, starting the thread with this:\n\n```plaintext\nOk a thread: I have never signed into my @virginmedia account but I \ndid set one up years ago but forgot all the details. I request a \npassword reset. The person on the phone gives me “one last chance” to \nguess what email I used, I get it on the third try!\n```\n\nThis is clearly an issue, as nobody should be granted extra tries on a password login, for any reason, as this clearly enables more brute-force attempts by bad actors, however, it gets even worse.\n\n```plaintext\nI finally get the password reset request actioned, phone \nrepresentative tells me password will be posted to me.. ok weird but I \naccept. Today the post arrives and I shit you not it’s my old \npassword!!!! (I remembered it on sight) So they store the password and \njust posted me it!!\n```\n\nThis is where it gets borderline [illegal](https://www.gov.uk/data-protection) in some countries (namely the UK). This means that Virgin Media stores their passwords in, generously, a reversible encryption standard. This is a dream for any potential hackers, as they don't even need to work to reverse the password hashes with a tool like [hashcat](https://hashcat.net/hashcat/), instead, they can simply export the database and be home free!! On top of this, they ***posted*** it. What. The. Hell. \nThis is clearly absolutely, immeasurably stupid. What's to stop someone from intercepting that mail, opening it, taking a photo of the password, and then re-packing the envelope? Nothing. \nThe geniuses at Virgin Media had an excellent response to this however:\n\n```plaintext\nPosting it to you is secure, as it's illegal to open someone elses mail. ^JGS\n```\n\nWhich is just... wow... it's on the same level of \"If someone's assaulting you, just say no, they can't touch you without your consent\".\nWhat an absolute embarrassment, as even hashing ***without salt*** would be better than this...\n","slug":"Virgin-Media-revealed-to-be-storing-passwords-in-plaintext-posts-password-to-customer","published":1,"updated":"2021-11-30T23:42:24.858Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6eduwjg000iookgg411353z","content":"<p>In a recent twitter thread detailing the password recovery process be twitter user <a href=\"https://twitter.com/_Freakyclown_\">_freakyclown_</a>, the user mentioned multiple fails from the popular airline company, starting the thread with this:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ok a thread: I have never signed into my @virginmedia account but I </span><br><span class=\"line\">did set one up years ago but forgot all the details. I request a </span><br><span class=\"line\">password reset. The person on the phone gives me “one last chance” to </span><br><span class=\"line\">guess what email I used, I get it on the third try!</span><br></pre></td></tr></table></figure>\n\n<p>This is clearly an issue, as nobody should be granted extra tries on a password login, for any reason, as this clearly enables more brute-force attempts by bad actors, however, it gets even worse.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I finally get the password reset request actioned, phone </span><br><span class=\"line\">representative tells me password will be posted to me.. ok weird but I </span><br><span class=\"line\">accept. Today the post arrives and I shit you not it’s my old </span><br><span class=\"line\">password!!!! (I remembered it on sight) So they store the password and </span><br><span class=\"line\">just posted me it!!</span><br></pre></td></tr></table></figure>\n\n<p>This is where it gets borderline <a href=\"https://www.gov.uk/data-protection\">illegal</a> in some countries (namely the UK). This means that Virgin Media stores their passwords in, generously, a reversible encryption standard. This is a dream for any potential hackers, as they don’t even need to work to reverse the password hashes with a tool like <a href=\"https://hashcat.net/hashcat/\">hashcat</a>, instead, they can simply export the database and be home free!! On top of this, they <em><strong>posted</strong></em> it. What. The. Hell.<br>This is clearly absolutely, immeasurably stupid. What’s to stop someone from intercepting that mail, opening it, taking a photo of the password, and then re-packing the envelope? Nothing.<br>The geniuses at Virgin Media had an excellent response to this however:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Posting it to you is secure, as it&#x27;s illegal to open someone elses mail. ^JGS</span><br></pre></td></tr></table></figure>\n\n<p>Which is just… wow… it’s on the same level of “If someone’s assaulting you, just say no, they can’t touch you without your consent”.<br>What an absolute embarrassment, as even hashing <em><strong>without salt</strong></em> would be better than this…</p>\n","site":{"data":{}},"excerpt":"","more":"<p>In a recent twitter thread detailing the password recovery process be twitter user <a href=\"https://twitter.com/_Freakyclown_\">_freakyclown_</a>, the user mentioned multiple fails from the popular airline company, starting the thread with this:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ok a thread: I have never signed into my @virginmedia account but I </span><br><span class=\"line\">did set one up years ago but forgot all the details. I request a </span><br><span class=\"line\">password reset. The person on the phone gives me “one last chance” to </span><br><span class=\"line\">guess what email I used, I get it on the third try!</span><br></pre></td></tr></table></figure>\n\n<p>This is clearly an issue, as nobody should be granted extra tries on a password login, for any reason, as this clearly enables more brute-force attempts by bad actors, however, it gets even worse.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">I finally get the password reset request actioned, phone </span><br><span class=\"line\">representative tells me password will be posted to me.. ok weird but I </span><br><span class=\"line\">accept. Today the post arrives and I shit you not it’s my old </span><br><span class=\"line\">password!!!! (I remembered it on sight) So they store the password and </span><br><span class=\"line\">just posted me it!!</span><br></pre></td></tr></table></figure>\n\n<p>This is where it gets borderline <a href=\"https://www.gov.uk/data-protection\">illegal</a> in some countries (namely the UK). This means that Virgin Media stores their passwords in, generously, a reversible encryption standard. This is a dream for any potential hackers, as they don’t even need to work to reverse the password hashes with a tool like <a href=\"https://hashcat.net/hashcat/\">hashcat</a>, instead, they can simply export the database and be home free!! On top of this, they <em><strong>posted</strong></em> it. What. The. Hell.<br>This is clearly absolutely, immeasurably stupid. What’s to stop someone from intercepting that mail, opening it, taking a photo of the password, and then re-packing the envelope? Nothing.<br>The geniuses at Virgin Media had an excellent response to this however:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Posting it to you is secure, as it&#x27;s illegal to open someone elses mail. ^JGS</span><br></pre></td></tr></table></figure>\n\n<p>Which is just… wow… it’s on the same level of “If someone’s assaulting you, just say no, they can’t touch you without your consent”.<br>What an absolute embarrassment, as even hashing <em><strong>without salt</strong></em> would be better than this…</p>\n"},{"title":"Hello World!","date":"2021-09-24T14:00:00.000Z","_content":"Hello there!\nThis is my new cybersecurity blog for general thoughts, as well as writeups for the various CTF’s I do in my spare time. Not every CTF will get a writeup, but some will\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World!\ndate: 2021-09-25\n---\nHello there!\nThis is my new cybersecurity blog for general thoughts, as well as writeups for the various CTF’s I do in my spare time. Not every CTF will get a writeup, but some will\n","slug":"hello-world","published":1,"updated":"2021-11-25T02:55:44.884Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6eduwjj000rookg1ie8amtl","content":"<p>Hello there!<br>This is my new cybersecurity blog for general thoughts, as well as writeups for the various CTF’s I do in my spare time. Not every CTF will get a writeup, but some will</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Hello there!<br>This is my new cybersecurity blog for general thoughts, as well as writeups for the various CTF’s I do in my spare time. Not every CTF will get a writeup, but some will</p>\n"},{"title":"Cross-Platform Scripting!","date":"2022-07-16T06:41:51.000Z","_content":"So I wanted to make a script that could be ran on both windows and unix based systems to help with distributing things on multiple platforms, all in 1 script without any changes to said script. \n\n\nTo do this, I first tried to use the \"ErrorActionPreference\" enviromental variable.\n```\n#!/bin/bash\n$ErrorActionPreference='SilentlyContinue' # We exploit that this has no meaning in a unix enviroment, but does in the windows powershell\n# Bash script here\ncal\n# This will (obviously) throw an error on windows, but since we silently continue, it executes the below on windows without error\n# but stops due to error on linux\nNew-Item -Path 'C:\\Users\\ghostdog\\Desktop\\Test.txt' -ItemType File\n\n```\n\nAt first, this seems to work, however, if we look at any command that is shared between the operating systems, we can see this fails, such as the following:\n```\n#!/bin/bash\n$ErrorActionPreference='SilentlyContinue'\n\ncal\necho \"This should only execute on unix!\"\n\nNew-Item -Path 'C:\\Users\\ghostdog\\Desktop\\Test.txt' -ItemType File\n```\n\nThis, obviously, leads to powershell outputting that echo. \n\nMy first thought to fix this, would be to simply modify the third and forth line to `cal && echo \"Unix!\"`, but, that seems to throw an error not caught by the powershell enviroment variable we set earlier in some versions. To fix this, i need a universal logical AND. \n\nThis, however, proved to be futile, as there was a much simpler solution:\n\n```\n:; echo \"I'm on unix!!!\" #\n:; echo \"I'm on unix!!!\" #\nECHO OFF \nECHO Hi Windows\nPAUSE\n```\n\nOr even better:\n```\n::; echo \"Unix!\" ; exit\nECHO OFF\nECHO Hi\nPAUSE\n```\n\nWe then save this as a batch file, and when we execute it on unix, it says \"Unix!\" but on windows, simply says \"Hi\".","source":"_posts/Cross-Platform-Scripting.md","raw":"---\ntitle: Cross-Platform Scripting!\ndate: 2022-07-16 16:41:51\ntags: scripting, bash, powershell, cmd, cli\n---\nSo I wanted to make a script that could be ran on both windows and unix based systems to help with distributing things on multiple platforms, all in 1 script without any changes to said script. \n\n\nTo do this, I first tried to use the \"ErrorActionPreference\" enviromental variable.\n```\n#!/bin/bash\n$ErrorActionPreference='SilentlyContinue' # We exploit that this has no meaning in a unix enviroment, but does in the windows powershell\n# Bash script here\ncal\n# This will (obviously) throw an error on windows, but since we silently continue, it executes the below on windows without error\n# but stops due to error on linux\nNew-Item -Path 'C:\\Users\\ghostdog\\Desktop\\Test.txt' -ItemType File\n\n```\n\nAt first, this seems to work, however, if we look at any command that is shared between the operating systems, we can see this fails, such as the following:\n```\n#!/bin/bash\n$ErrorActionPreference='SilentlyContinue'\n\ncal\necho \"This should only execute on unix!\"\n\nNew-Item -Path 'C:\\Users\\ghostdog\\Desktop\\Test.txt' -ItemType File\n```\n\nThis, obviously, leads to powershell outputting that echo. \n\nMy first thought to fix this, would be to simply modify the third and forth line to `cal && echo \"Unix!\"`, but, that seems to throw an error not caught by the powershell enviroment variable we set earlier in some versions. To fix this, i need a universal logical AND. \n\nThis, however, proved to be futile, as there was a much simpler solution:\n\n```\n:; echo \"I'm on unix!!!\" #\n:; echo \"I'm on unix!!!\" #\nECHO OFF \nECHO Hi Windows\nPAUSE\n```\n\nOr even better:\n```\n::; echo \"Unix!\" ; exit\nECHO OFF\nECHO Hi\nPAUSE\n```\n\nWe then save this as a batch file, and when we execute it on unix, it says \"Unix!\" but on windows, simply says \"Hi\".","slug":"Cross-Platform-Scripting","published":1,"updated":"2022-08-07T05:22:29.244Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ivpi5m0000lxp7griedri0","content":"<p>So I wanted to make a script that could be ran on both windows and unix based systems to help with distributing things on multiple platforms, all in 1 script without any changes to said script. </p>\n<p>To do this, I first tried to use the “ErrorActionPreference” enviromental variable.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">$ErrorActionPreference=&#x27;SilentlyContinue&#x27; # We exploit that this has no meaning in a unix enviroment, but does in the windows powershell</span><br><span class=\"line\"># Bash script here</span><br><span class=\"line\">cal</span><br><span class=\"line\"># This will (obviously) throw an error on windows, but since we silently continue, it executes the below on windows without error</span><br><span class=\"line\"># but stops due to error on linux</span><br><span class=\"line\">New-Item -Path &#x27;C:\\Users\\ghostdog\\Desktop\\Test.txt&#x27; -ItemType File</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>At first, this seems to work, however, if we look at any command that is shared between the operating systems, we can see this fails, such as the following:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">$ErrorActionPreference=&#x27;SilentlyContinue&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">cal</span><br><span class=\"line\">echo &quot;This should only execute on unix!&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">New-Item -Path &#x27;C:\\Users\\ghostdog\\Desktop\\Test.txt&#x27; -ItemType File</span><br></pre></td></tr></table></figure>\n\n<p>This, obviously, leads to powershell outputting that echo. </p>\n<p>My first thought to fix this, would be to simply modify the third and forth line to <code>cal &amp;&amp; echo &quot;Unix!&quot;</code>, but, that seems to throw an error not caught by the powershell enviroment variable we set earlier in some versions. To fix this, i need a universal logical AND. </p>\n<p>This, however, proved to be futile, as there was a much simpler solution:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:; echo &quot;I&#x27;m on unix!!!&quot; #</span><br><span class=\"line\">:; echo &quot;I&#x27;m on unix!!!&quot; #</span><br><span class=\"line\">ECHO OFF </span><br><span class=\"line\">ECHO Hi Windows</span><br><span class=\"line\">PAUSE</span><br></pre></td></tr></table></figure>\n\n<p>Or even better:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">::; echo &quot;Unix!&quot; ; exit</span><br><span class=\"line\">ECHO OFF</span><br><span class=\"line\">ECHO Hi</span><br><span class=\"line\">PAUSE</span><br></pre></td></tr></table></figure>\n\n<p>We then save this as a batch file, and when we execute it on unix, it says “Unix!” but on windows, simply says “Hi”.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>So I wanted to make a script that could be ran on both windows and unix based systems to help with distributing things on multiple platforms, all in 1 script without any changes to said script. </p>\n<p>To do this, I first tried to use the “ErrorActionPreference” enviromental variable.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">$ErrorActionPreference=&#x27;SilentlyContinue&#x27; # We exploit that this has no meaning in a unix enviroment, but does in the windows powershell</span><br><span class=\"line\"># Bash script here</span><br><span class=\"line\">cal</span><br><span class=\"line\"># This will (obviously) throw an error on windows, but since we silently continue, it executes the below on windows without error</span><br><span class=\"line\"># but stops due to error on linux</span><br><span class=\"line\">New-Item -Path &#x27;C:\\Users\\ghostdog\\Desktop\\Test.txt&#x27; -ItemType File</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>At first, this seems to work, however, if we look at any command that is shared between the operating systems, we can see this fails, such as the following:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">$ErrorActionPreference=&#x27;SilentlyContinue&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">cal</span><br><span class=\"line\">echo &quot;This should only execute on unix!&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">New-Item -Path &#x27;C:\\Users\\ghostdog\\Desktop\\Test.txt&#x27; -ItemType File</span><br></pre></td></tr></table></figure>\n\n<p>This, obviously, leads to powershell outputting that echo. </p>\n<p>My first thought to fix this, would be to simply modify the third and forth line to <code>cal &amp;&amp; echo &quot;Unix!&quot;</code>, but, that seems to throw an error not caught by the powershell enviroment variable we set earlier in some versions. To fix this, i need a universal logical AND. </p>\n<p>This, however, proved to be futile, as there was a much simpler solution:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:; echo &quot;I&#x27;m on unix!!!&quot; #</span><br><span class=\"line\">:; echo &quot;I&#x27;m on unix!!!&quot; #</span><br><span class=\"line\">ECHO OFF </span><br><span class=\"line\">ECHO Hi Windows</span><br><span class=\"line\">PAUSE</span><br></pre></td></tr></table></figure>\n\n<p>Or even better:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">::; echo &quot;Unix!&quot; ; exit</span><br><span class=\"line\">ECHO OFF</span><br><span class=\"line\">ECHO Hi</span><br><span class=\"line\">PAUSE</span><br></pre></td></tr></table></figure>\n\n<p>We then save this as a batch file, and when we execute it on unix, it says “Unix!” but on windows, simply says “Hi”.</p>\n"},{"title":"FPGA Holidays Adventures","date":"2022-07-16T03:48:51.000Z","_content":"\nHello! Long time no write... Guess who forgot to upload their finished blog posts in the correct format?\n\nWith the school holidays wrapping up in 2 days, I thought I might cover what I did for fun over the 3 week break I got. \nI decided to get into the world of fpga programming!\n\nAn fpga (field programmable gate array) is a close relative to the cpu, with a key small difference. \nWhile a cpu has a set pattern of logic gates constructed at the factory using a laser to etch into silicon, an fpga can change it's gates depending on what you want.\n\nThis makes it incredibly ~~pansexual~~ useful for anything in the realm of digital electronics.\nFor example, it can be any logic gate, a gpu, a cpu, a video encoder, a tool to mine bitcoin, and more.\n\nIn this post, I'll go over the details of the process I went through to program this little bugger, and how to replace the default blinking an led Green with a new exciting color: Blue! (And slightly faster).\n\n\nFirst, let's install the iceprog cmd line tools, as per their [documentation](https://clifford.at/icestorm):\n```\ngit clone https://github.com/YosysHQ/icestorm.git icestorm\ncd icestorm\nmake -j$(nproc)\nsudo make install\n```\n(This assumes you already have the dependancies installed)\n\nAlternatively, if on arch linux, simply yay install icestorm-git, arachne-pnr-git, and yosys-git\n\nThen run:\n```\ngit clone https://github.com/FPGAwars/toolchain-icesprog.git\ncd toolchain-icesprog\n./build.sh linux_x86_64 # Assuming you are on 64 bit linux\n```\nIf this errors out, do the following:\n```\nwget https://github.com/FPGAwars/tools-oss-cad-suite/releases/download/v0.0.8/tools-oss-cad-suite-linux_x86_64-0.0.8.tar.gz\ntar -xzvf tools-oss-cad-suite-linux_x86_64-0.0.8.tar.gz\nsudo cp -n * /bin/\nsudo cp -n -r * /usr/\n```\n\nAfter this, you should be able to run `icesprog --help` to display the following:\n```\nusage: /usr/libexec/icesprog [OPTION] [FILE]\n             -w | --write                   write spi-flash or gpio                      \n             -r | --read                    read  spi-flash or gpio                      \n             -e | --erase                   erase spi-flash                              \n             -p | --probe                   probe spi-flash                              \n             -o | --offset                  spi-flash offset                  \t\t\t \n             -l | --len                     len of write/read                            \n             -g | --gpio                    icelink gpio write/read                      \n             -m | --mode                    icelink gpio mode                            \n             -j | --jtag-sel                jtag interface select (1 or 2)               \n             -c | --clk-sel                 clk source select (1 to 4)                   \n             -h | --help                    display help info                            \n\n             -- version 1.1b --\n```\nHurrah! \nNow, if you run `icesprog -r` it will error out, saying `iCELink open fail!`\n\nIf we look at the [iceSugar-Pro github issues page](https://github.com/wuxx/icesugar-pro/issues), we get nothing.\nBut, if we look at the model before it, [we do](https://github.com/wuxx/icesugar/issues/44)!\nThis is on macos, but, macos is still unix based. Lets see if it fixes things...\n\nAfter this, we can compile our program.\nNow we need to upload it.\nTo install the tools for this, simply run:\n```\ngit clone https://github.com/ntfreak/openocd.git\ncd openocd\ngit submodule init\ngit submodule update\n./bootstrap\n./configure --enable-cmsis-dap\nmake -j\nsudo make install\n```\nThen, by using the fancy pants \"drag and drop\" programming that this dev board supports, we can simply plug the board into our computer, and then drag and drop our compiled file.\n\nNext, lets make our first program.\nI'll be using verilog as it's a more gentle learning curve\n\nTo program our fpga, we use 2 files:\n - The .v file, this contains our \"code\" we want to execute \n - The .lpf file, this contains our definitions for what pins do what, for example, saying that `led_o` is actually pin B11.\n\nSo, lets go over our v file first:\n\n```c\nmodule blink (\n    input      clk_i, // our input clock signal for keeping time, this is defined in our lpf file, it's 25MHz\n    output reg led_o  // Our output for our led, reg is the only type we can use for outputs, and is similar in concept to a flipflop\n);\nlocalparam MAX = 2_500_000;\nlocalparam WIDTH = $clog2(MAX);\n\n// Initialise 2 variables as wires, think of these as point a to point b connections, kind of like a literal copper wire\nwire rst_s;\nwire clk_s;\n\nassign clk_s = clk_i; // We are taking our input (clk_i) and giving it's value to clk_s\n//pll_12_16 pll_inst (.clki(clk_i), .clko(clk_s), .rst(rst_s));\nrst_gen rst_inst (.clk_i(clk_s), .rst_i(1'b0), .rst_o(rst_s));\n\nreg  [WIDTH-1:0] cpt_s;\nwire [WIDTH-1:0] cpt_next_s = cpt_s + 1'b1;\n\nwire             end_s = cpt_s == MAX-1;\n\nalways @(posedge clk_s) begin\n    cpt_s <= (rst_s || end_s) ? {WIDTH{1'b0}} : cpt_next_s;\n\n    if (rst_s) \n        led_o <= 1'b0;\n    else if (end_s)\n        led_o <= ~led_o; // Invert the current value of led_o\nend\nendmodule\n\n```\n\nNext, lets cover our lpf file:\n```c\n\nLOCATE COMP \"clk_i\" SITE \"P6\"; // As per the documentation, this pin gets our on-board oscillator!\nIOBUF PORT \"clk_i\" IO_TYPE=LVCMOS33;\nFREQUENCY PORT \"clk_i\" 25 MHZ; // We have 25MHz, so make sure the compiler knows that\n\n\n// Uncomment the following for various led colors, detailed on the front page of the fpga documentaion\n//LOCATE COMP \"led_o\" SITE \"A11\";\nLOCATE COMP \"led_o\" SITE \"B11\";\n//LOCATE COMP \"led_o\" SITE \"A12\";\n\nIOBUF PORT \"led_o\" IO_TYPE=LVCMOS25;\n```\n\nTo upload this, we drag and drop our 2 output files from compiling into the emulated usb storage device.\nThe current LED blinking program should halt (the large white body rgb led blinking Green), and then a small red led near the usb port should flash, that means that our program is now getting put into the flash memory of the board, meaning it will persist on our next reboot.\n\nAfter this, simply hit the reset button (in the middle of the rgb led and usb-c port), and tada!\n\n# IMPORTANT NOTE\n## TO PROGRAM, DO NOT USE THE USB-C PROVIDED IN THE BREAKOUT (GREEN) BOARD, AS THIS WILL NOT UPLOAD OUR FILES AND ERROR OUT SILENTLY\n## INSTEAD, UNPLUG THE ENTIRE MODULE FROM THE BREAKOUT BOARD, AND CONNECT YOUR USB CABLE TO THE PORT ON THAT.\n\n\nNow as a fun exercise for the reader, try adjusting the speed of the blinking LED.\nFor the sake of being able to replicate things; I'll include my makefile, basically ripped of the documentation, minus a small inconvenience:\n```make\nTARGET=blink_slow\nTOP=blink_slow\n\nOBJS+=blink.v rst_gen.v\n\nall: ${TARGET}.bit\n\n$(TARGET).json: $(OBJS)\n    yosys -p \"synth_ecp5 -json $@\" $(OBJS)\n\n$(TARGET)_out.config: $(TARGET).json\n    nextpnr-ecp5 --25k --package CABGA256 --speed 6 --json $< --textcfg $@ --lpf $(TARGET).lpf --freq 65\n\n$(TARGET).bit: out.config\n    ecppack --svf ${TARGET}.svf $< $@\n\n${TARGET}.svf : ${TARGET}.bit\n\nprog: ${TARGET}.svf\n    openFPGALoader -c digilent_hs2 $(TARGET).bit\n\nclean:\n    rm -f *.svf *.bit *.ys\n\n.PHONY: prog clean\n\n```\nAnd my config file (which i have named `out.config`) is straight from the github page [here](https://raw.githubusercontent.com/wuxx/icesugar-pro/master/src/blink/blink_out.config).\n\nI'm planning another project involving this fpga, one thats more challenging than anything i've really ever programmed, so hopefully that goes well!\n\nSee ya round - GhostDog","source":"_posts/FPGA-Holidays-Adventures.md","raw":"---\ntitle: FPGA Holidays Adventures\ndate: 2022-07-16 13:48:51\ntags: FPGA, programming, icelink\n---\n\nHello! Long time no write... Guess who forgot to upload their finished blog posts in the correct format?\n\nWith the school holidays wrapping up in 2 days, I thought I might cover what I did for fun over the 3 week break I got. \nI decided to get into the world of fpga programming!\n\nAn fpga (field programmable gate array) is a close relative to the cpu, with a key small difference. \nWhile a cpu has a set pattern of logic gates constructed at the factory using a laser to etch into silicon, an fpga can change it's gates depending on what you want.\n\nThis makes it incredibly ~~pansexual~~ useful for anything in the realm of digital electronics.\nFor example, it can be any logic gate, a gpu, a cpu, a video encoder, a tool to mine bitcoin, and more.\n\nIn this post, I'll go over the details of the process I went through to program this little bugger, and how to replace the default blinking an led Green with a new exciting color: Blue! (And slightly faster).\n\n\nFirst, let's install the iceprog cmd line tools, as per their [documentation](https://clifford.at/icestorm):\n```\ngit clone https://github.com/YosysHQ/icestorm.git icestorm\ncd icestorm\nmake -j$(nproc)\nsudo make install\n```\n(This assumes you already have the dependancies installed)\n\nAlternatively, if on arch linux, simply yay install icestorm-git, arachne-pnr-git, and yosys-git\n\nThen run:\n```\ngit clone https://github.com/FPGAwars/toolchain-icesprog.git\ncd toolchain-icesprog\n./build.sh linux_x86_64 # Assuming you are on 64 bit linux\n```\nIf this errors out, do the following:\n```\nwget https://github.com/FPGAwars/tools-oss-cad-suite/releases/download/v0.0.8/tools-oss-cad-suite-linux_x86_64-0.0.8.tar.gz\ntar -xzvf tools-oss-cad-suite-linux_x86_64-0.0.8.tar.gz\nsudo cp -n * /bin/\nsudo cp -n -r * /usr/\n```\n\nAfter this, you should be able to run `icesprog --help` to display the following:\n```\nusage: /usr/libexec/icesprog [OPTION] [FILE]\n             -w | --write                   write spi-flash or gpio                      \n             -r | --read                    read  spi-flash or gpio                      \n             -e | --erase                   erase spi-flash                              \n             -p | --probe                   probe spi-flash                              \n             -o | --offset                  spi-flash offset                  \t\t\t \n             -l | --len                     len of write/read                            \n             -g | --gpio                    icelink gpio write/read                      \n             -m | --mode                    icelink gpio mode                            \n             -j | --jtag-sel                jtag interface select (1 or 2)               \n             -c | --clk-sel                 clk source select (1 to 4)                   \n             -h | --help                    display help info                            \n\n             -- version 1.1b --\n```\nHurrah! \nNow, if you run `icesprog -r` it will error out, saying `iCELink open fail!`\n\nIf we look at the [iceSugar-Pro github issues page](https://github.com/wuxx/icesugar-pro/issues), we get nothing.\nBut, if we look at the model before it, [we do](https://github.com/wuxx/icesugar/issues/44)!\nThis is on macos, but, macos is still unix based. Lets see if it fixes things...\n\nAfter this, we can compile our program.\nNow we need to upload it.\nTo install the tools for this, simply run:\n```\ngit clone https://github.com/ntfreak/openocd.git\ncd openocd\ngit submodule init\ngit submodule update\n./bootstrap\n./configure --enable-cmsis-dap\nmake -j\nsudo make install\n```\nThen, by using the fancy pants \"drag and drop\" programming that this dev board supports, we can simply plug the board into our computer, and then drag and drop our compiled file.\n\nNext, lets make our first program.\nI'll be using verilog as it's a more gentle learning curve\n\nTo program our fpga, we use 2 files:\n - The .v file, this contains our \"code\" we want to execute \n - The .lpf file, this contains our definitions for what pins do what, for example, saying that `led_o` is actually pin B11.\n\nSo, lets go over our v file first:\n\n```c\nmodule blink (\n    input      clk_i, // our input clock signal for keeping time, this is defined in our lpf file, it's 25MHz\n    output reg led_o  // Our output for our led, reg is the only type we can use for outputs, and is similar in concept to a flipflop\n);\nlocalparam MAX = 2_500_000;\nlocalparam WIDTH = $clog2(MAX);\n\n// Initialise 2 variables as wires, think of these as point a to point b connections, kind of like a literal copper wire\nwire rst_s;\nwire clk_s;\n\nassign clk_s = clk_i; // We are taking our input (clk_i) and giving it's value to clk_s\n//pll_12_16 pll_inst (.clki(clk_i), .clko(clk_s), .rst(rst_s));\nrst_gen rst_inst (.clk_i(clk_s), .rst_i(1'b0), .rst_o(rst_s));\n\nreg  [WIDTH-1:0] cpt_s;\nwire [WIDTH-1:0] cpt_next_s = cpt_s + 1'b1;\n\nwire             end_s = cpt_s == MAX-1;\n\nalways @(posedge clk_s) begin\n    cpt_s <= (rst_s || end_s) ? {WIDTH{1'b0}} : cpt_next_s;\n\n    if (rst_s) \n        led_o <= 1'b0;\n    else if (end_s)\n        led_o <= ~led_o; // Invert the current value of led_o\nend\nendmodule\n\n```\n\nNext, lets cover our lpf file:\n```c\n\nLOCATE COMP \"clk_i\" SITE \"P6\"; // As per the documentation, this pin gets our on-board oscillator!\nIOBUF PORT \"clk_i\" IO_TYPE=LVCMOS33;\nFREQUENCY PORT \"clk_i\" 25 MHZ; // We have 25MHz, so make sure the compiler knows that\n\n\n// Uncomment the following for various led colors, detailed on the front page of the fpga documentaion\n//LOCATE COMP \"led_o\" SITE \"A11\";\nLOCATE COMP \"led_o\" SITE \"B11\";\n//LOCATE COMP \"led_o\" SITE \"A12\";\n\nIOBUF PORT \"led_o\" IO_TYPE=LVCMOS25;\n```\n\nTo upload this, we drag and drop our 2 output files from compiling into the emulated usb storage device.\nThe current LED blinking program should halt (the large white body rgb led blinking Green), and then a small red led near the usb port should flash, that means that our program is now getting put into the flash memory of the board, meaning it will persist on our next reboot.\n\nAfter this, simply hit the reset button (in the middle of the rgb led and usb-c port), and tada!\n\n# IMPORTANT NOTE\n## TO PROGRAM, DO NOT USE THE USB-C PROVIDED IN THE BREAKOUT (GREEN) BOARD, AS THIS WILL NOT UPLOAD OUR FILES AND ERROR OUT SILENTLY\n## INSTEAD, UNPLUG THE ENTIRE MODULE FROM THE BREAKOUT BOARD, AND CONNECT YOUR USB CABLE TO THE PORT ON THAT.\n\n\nNow as a fun exercise for the reader, try adjusting the speed of the blinking LED.\nFor the sake of being able to replicate things; I'll include my makefile, basically ripped of the documentation, minus a small inconvenience:\n```make\nTARGET=blink_slow\nTOP=blink_slow\n\nOBJS+=blink.v rst_gen.v\n\nall: ${TARGET}.bit\n\n$(TARGET).json: $(OBJS)\n    yosys -p \"synth_ecp5 -json $@\" $(OBJS)\n\n$(TARGET)_out.config: $(TARGET).json\n    nextpnr-ecp5 --25k --package CABGA256 --speed 6 --json $< --textcfg $@ --lpf $(TARGET).lpf --freq 65\n\n$(TARGET).bit: out.config\n    ecppack --svf ${TARGET}.svf $< $@\n\n${TARGET}.svf : ${TARGET}.bit\n\nprog: ${TARGET}.svf\n    openFPGALoader -c digilent_hs2 $(TARGET).bit\n\nclean:\n    rm -f *.svf *.bit *.ys\n\n.PHONY: prog clean\n\n```\nAnd my config file (which i have named `out.config`) is straight from the github page [here](https://raw.githubusercontent.com/wuxx/icesugar-pro/master/src/blink/blink_out.config).\n\nI'm planning another project involving this fpga, one thats more challenging than anything i've really ever programmed, so hopefully that goes well!\n\nSee ya round - GhostDog","slug":"FPGA-Holidays-Adventures","published":1,"updated":"2022-08-07T05:22:46.024Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6ivpi5q0001lxp7h3hf0k14","content":"<p>Hello! Long time no write… Guess who forgot to upload their finished blog posts in the correct format?</p>\n<p>With the school holidays wrapping up in 2 days, I thought I might cover what I did for fun over the 3 week break I got.<br>I decided to get into the world of fpga programming!</p>\n<p>An fpga (field programmable gate array) is a close relative to the cpu, with a key small difference.<br>While a cpu has a set pattern of logic gates constructed at the factory using a laser to etch into silicon, an fpga can change it’s gates depending on what you want.</p>\n<p>This makes it incredibly <del>pansexual</del> useful for anything in the realm of digital electronics.<br>For example, it can be any logic gate, a gpu, a cpu, a video encoder, a tool to mine bitcoin, and more.</p>\n<p>In this post, I’ll go over the details of the process I went through to program this little bugger, and how to replace the default blinking an led Green with a new exciting color: Blue! (And slightly faster).</p>\n<p>First, let’s install the iceprog cmd line tools, as per their <a href=\"https://clifford.at/icestorm\">documentation</a>:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/YosysHQ/icestorm.git icestorm</span><br><span class=\"line\">cd icestorm</span><br><span class=\"line\">make -j$(nproc)</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n<p>(This assumes you already have the dependancies installed)</p>\n<p>Alternatively, if on arch linux, simply yay install icestorm-git, arachne-pnr-git, and yosys-git</p>\n<p>Then run:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/FPGAwars/toolchain-icesprog.git</span><br><span class=\"line\">cd toolchain-icesprog</span><br><span class=\"line\">./build.sh linux_x86_64 # Assuming you are on 64 bit linux</span><br></pre></td></tr></table></figure>\n<p>If this errors out, do the following:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/FPGAwars/tools-oss-cad-suite/releases/download/v0.0.8/tools-oss-cad-suite-linux_x86_64-0.0.8.tar.gz</span><br><span class=\"line\">tar -xzvf tools-oss-cad-suite-linux_x86_64-0.0.8.tar.gz</span><br><span class=\"line\">sudo cp -n * /bin/</span><br><span class=\"line\">sudo cp -n -r * /usr/</span><br></pre></td></tr></table></figure>\n\n<p>After this, you should be able to run <code>icesprog --help</code> to display the following:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">usage: /usr/libexec/icesprog [OPTION] [FILE]</span><br><span class=\"line\">             -w | --write                   write spi-flash or gpio                      </span><br><span class=\"line\">             -r | --read                    read  spi-flash or gpio                      </span><br><span class=\"line\">             -e | --erase                   erase spi-flash                              </span><br><span class=\"line\">             -p | --probe                   probe spi-flash                              </span><br><span class=\"line\">             -o | --offset                  spi-flash offset                  \t\t\t </span><br><span class=\"line\">             -l | --len                     len of write/read                            </span><br><span class=\"line\">             -g | --gpio                    icelink gpio write/read                      </span><br><span class=\"line\">             -m | --mode                    icelink gpio mode                            </span><br><span class=\"line\">             -j | --jtag-sel                jtag interface select (1 or 2)               </span><br><span class=\"line\">             -c | --clk-sel                 clk source select (1 to 4)                   </span><br><span class=\"line\">             -h | --help                    display help info                            </span><br><span class=\"line\"></span><br><span class=\"line\">             -- version 1.1b --</span><br></pre></td></tr></table></figure>\n<p>Hurrah!<br>Now, if you run <code>icesprog -r</code> it will error out, saying <code>iCELink open fail!</code></p>\n<p>If we look at the <a href=\"https://github.com/wuxx/icesugar-pro/issues\">iceSugar-Pro github issues page</a>, we get nothing.<br>But, if we look at the model before it, <a href=\"https://github.com/wuxx/icesugar/issues/44\">we do</a>!<br>This is on macos, but, macos is still unix based. Lets see if it fixes things…</p>\n<p>After this, we can compile our program.<br>Now we need to upload it.<br>To install the tools for this, simply run:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/ntfreak/openocd.git</span><br><span class=\"line\">cd openocd</span><br><span class=\"line\">git submodule init</span><br><span class=\"line\">git submodule update</span><br><span class=\"line\">./bootstrap</span><br><span class=\"line\">./configure --enable-cmsis-dap</span><br><span class=\"line\">make -j</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n<p>Then, by using the fancy pants “drag and drop” programming that this dev board supports, we can simply plug the board into our computer, and then drag and drop our compiled file.</p>\n<p>Next, lets make our first program.<br>I’ll be using verilog as it’s a more gentle learning curve</p>\n<p>To program our fpga, we use 2 files:</p>\n<ul>\n<li>The .v file, this contains our “code” we want to execute </li>\n<li>The .lpf file, this contains our definitions for what pins do what, for example, saying that <code>led_o</code> is actually pin B11.</li>\n</ul>\n<p>So, lets go over our v file first:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module <span class=\"title function_\">blink</span> <span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    input      clk_i, <span class=\"comment\">// our input clock signal for keeping time, this is defined in our lpf file, it&#x27;s 25MHz</span></span></span><br><span class=\"line\"><span class=\"params\">    output reg led_o  <span class=\"comment\">// Our output for our led, reg is the only type we can use for outputs, and is similar in concept to a flipflop</span></span></span><br><span class=\"line\"><span class=\"params\">)</span>;</span><br><span class=\"line\">localparam MAX = <span class=\"number\">2</span>_500_000;</span><br><span class=\"line\">localparam WIDTH = $clog2(MAX);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Initialise 2 variables as wires, think of these as point a to point b connections, kind of like a literal copper wire</span></span><br><span class=\"line\">wire rst_s;</span><br><span class=\"line\">wire clk_s;</span><br><span class=\"line\"></span><br><span class=\"line\">assign clk_s = clk_i; <span class=\"comment\">// We are taking our input (clk_i) and giving it&#x27;s value to clk_s</span></span><br><span class=\"line\"><span class=\"comment\">//pll_12_16 pll_inst (.clki(clk_i), .clko(clk_s), .rst(rst_s));</span></span><br><span class=\"line\">rst_gen <span class=\"title function_\">rst_inst</span> <span class=\"params\">(.clk_i(clk_s), .rst_i(<span class=\"number\">1&#x27;b</span>0), .rst_o(rst_s))</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">reg  [WIDTH<span class=\"number\">-1</span>:<span class=\"number\">0</span>] cpt_s;</span><br><span class=\"line\">wire [WIDTH<span class=\"number\">-1</span>:<span class=\"number\">0</span>] cpt_next_s = cpt_s + <span class=\"number\">1&#x27;b</span>1;</span><br><span class=\"line\"></span><br><span class=\"line\">wire             end_s = cpt_s == MAX<span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">always @(posedge clk_s) begin</span><br><span class=\"line\">    cpt_s &lt;= (rst_s || end_s) ? &#123;WIDTH&#123;<span class=\"number\">1&#x27;b</span>0&#125;&#125; : cpt_next_s;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rst_s) </span><br><span class=\"line\">        led_o &lt;= <span class=\"number\">1&#x27;b</span>0;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (end_s)</span><br><span class=\"line\">        led_o &lt;= ~led_o; <span class=\"comment\">// Invert the current value of led_o</span></span><br><span class=\"line\">end</span><br><span class=\"line\">endmodule</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Next, lets cover our lpf file:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">LOCATE COMP <span class=\"string\">&quot;clk_i&quot;</span> SITE <span class=\"string\">&quot;P6&quot;</span>; <span class=\"comment\">// As per the documentation, this pin gets our on-board oscillator!</span></span><br><span class=\"line\">IOBUF PORT <span class=\"string\">&quot;clk_i&quot;</span> IO_TYPE=LVCMOS33;</span><br><span class=\"line\">FREQUENCY PORT <span class=\"string\">&quot;clk_i&quot;</span> <span class=\"number\">25</span> MHZ; <span class=\"comment\">// We have 25MHz, so make sure the compiler knows that</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Uncomment the following for various led colors, detailed on the front page of the fpga documentaion</span></span><br><span class=\"line\"><span class=\"comment\">//LOCATE COMP &quot;led_o&quot; SITE &quot;A11&quot;;</span></span><br><span class=\"line\">LOCATE COMP <span class=\"string\">&quot;led_o&quot;</span> SITE <span class=\"string\">&quot;B11&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">//LOCATE COMP &quot;led_o&quot; SITE &quot;A12&quot;;</span></span><br><span class=\"line\"></span><br><span class=\"line\">IOBUF PORT <span class=\"string\">&quot;led_o&quot;</span> IO_TYPE=LVCMOS25;</span><br></pre></td></tr></table></figure>\n\n<p>To upload this, we drag and drop our 2 output files from compiling into the emulated usb storage device.<br>The current LED blinking program should halt (the large white body rgb led blinking Green), and then a small red led near the usb port should flash, that means that our program is now getting put into the flash memory of the board, meaning it will persist on our next reboot.</p>\n<p>After this, simply hit the reset button (in the middle of the rgb led and usb-c port), and tada!</p>\n<h1 id=\"IMPORTANT-NOTE\"><a href=\"#IMPORTANT-NOTE\" class=\"headerlink\" title=\"IMPORTANT NOTE\"></a>IMPORTANT NOTE</h1><h2 id=\"TO-PROGRAM-DO-NOT-USE-THE-USB-C-PROVIDED-IN-THE-BREAKOUT-GREEN-BOARD-AS-THIS-WILL-NOT-UPLOAD-OUR-FILES-AND-ERROR-OUT-SILENTLY\"><a href=\"#TO-PROGRAM-DO-NOT-USE-THE-USB-C-PROVIDED-IN-THE-BREAKOUT-GREEN-BOARD-AS-THIS-WILL-NOT-UPLOAD-OUR-FILES-AND-ERROR-OUT-SILENTLY\" class=\"headerlink\" title=\"TO PROGRAM, DO NOT USE THE USB-C PROVIDED IN THE BREAKOUT (GREEN) BOARD, AS THIS WILL NOT UPLOAD OUR FILES AND ERROR OUT SILENTLY\"></a>TO PROGRAM, DO NOT USE THE USB-C PROVIDED IN THE BREAKOUT (GREEN) BOARD, AS THIS WILL NOT UPLOAD OUR FILES AND ERROR OUT SILENTLY</h2><h2 id=\"INSTEAD-UNPLUG-THE-ENTIRE-MODULE-FROM-THE-BREAKOUT-BOARD-AND-CONNECT-YOUR-USB-CABLE-TO-THE-PORT-ON-THAT\"><a href=\"#INSTEAD-UNPLUG-THE-ENTIRE-MODULE-FROM-THE-BREAKOUT-BOARD-AND-CONNECT-YOUR-USB-CABLE-TO-THE-PORT-ON-THAT\" class=\"headerlink\" title=\"INSTEAD, UNPLUG THE ENTIRE MODULE FROM THE BREAKOUT BOARD, AND CONNECT YOUR USB CABLE TO THE PORT ON THAT.\"></a>INSTEAD, UNPLUG THE ENTIRE MODULE FROM THE BREAKOUT BOARD, AND CONNECT YOUR USB CABLE TO THE PORT ON THAT.</h2><p>Now as a fun exercise for the reader, try adjusting the speed of the blinking LED.<br>For the sake of being able to replicate things; I’ll include my makefile, basically ripped of the documentation, minus a small inconvenience:</p>\n<figure class=\"highlight make\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TARGET=blink_slow</span><br><span class=\"line\">TOP=blink_slow</span><br><span class=\"line\"></span><br><span class=\"line\">OBJS+=blink.v rst_gen.v</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">all: $&#123;TARGET&#125;.bit</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$(TARGET)</span>.json: <span class=\"variable\">$(OBJS)</span></span><br><span class=\"line\">    yosys -p <span class=\"string\">&quot;synth_ecp5 -json <span class=\"variable\">$@</span>&quot;</span> <span class=\"variable\">$(OBJS)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$(TARGET)</span>_out.config: <span class=\"variable\">$(TARGET)</span>.json</span><br><span class=\"line\">    nextpnr-ecp5 --25k --package CABGA256 --speed 6 --json <span class=\"variable\">$&lt;</span> --textcfg <span class=\"variable\">$@</span> --lpf <span class=\"variable\">$(TARGET)</span>.lpf --freq 65</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$(TARGET)</span>.bit: out.config</span><br><span class=\"line\">    ecppack --svf $&#123;TARGET&#125;.svf <span class=\"variable\">$&lt;</span> <span class=\"variable\">$@</span></span><br><span class=\"line\"></span><br><span class=\"line\">$&#123;TARGET&#125;.svf : $&#123;TARGET&#125;.bit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">prog: $&#123;TARGET&#125;.svf</span></span><br><span class=\"line\">    openFPGALoader -c digilent_hs2 <span class=\"variable\">$(TARGET)</span>.bit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">clean:</span></span><br><span class=\"line\">    rm -f *.svf *.bit *.ys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\"><span class=\"keyword\">.PHONY</span>: prog clean</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>And my config file (which i have named <code>out.config</code>) is straight from the github page <a href=\"https://raw.githubusercontent.com/wuxx/icesugar-pro/master/src/blink/blink_out.config\">here</a>.</p>\n<p>I’m planning another project involving this fpga, one thats more challenging than anything i’ve really ever programmed, so hopefully that goes well!</p>\n<p>See ya round - GhostDog</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Hello! Long time no write… Guess who forgot to upload their finished blog posts in the correct format?</p>\n<p>With the school holidays wrapping up in 2 days, I thought I might cover what I did for fun over the 3 week break I got.<br>I decided to get into the world of fpga programming!</p>\n<p>An fpga (field programmable gate array) is a close relative to the cpu, with a key small difference.<br>While a cpu has a set pattern of logic gates constructed at the factory using a laser to etch into silicon, an fpga can change it’s gates depending on what you want.</p>\n<p>This makes it incredibly <del>pansexual</del> useful for anything in the realm of digital electronics.<br>For example, it can be any logic gate, a gpu, a cpu, a video encoder, a tool to mine bitcoin, and more.</p>\n<p>In this post, I’ll go over the details of the process I went through to program this little bugger, and how to replace the default blinking an led Green with a new exciting color: Blue! (And slightly faster).</p>\n<p>First, let’s install the iceprog cmd line tools, as per their <a href=\"https://clifford.at/icestorm\">documentation</a>:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/YosysHQ/icestorm.git icestorm</span><br><span class=\"line\">cd icestorm</span><br><span class=\"line\">make -j$(nproc)</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n<p>(This assumes you already have the dependancies installed)</p>\n<p>Alternatively, if on arch linux, simply yay install icestorm-git, arachne-pnr-git, and yosys-git</p>\n<p>Then run:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/FPGAwars/toolchain-icesprog.git</span><br><span class=\"line\">cd toolchain-icesprog</span><br><span class=\"line\">./build.sh linux_x86_64 # Assuming you are on 64 bit linux</span><br></pre></td></tr></table></figure>\n<p>If this errors out, do the following:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/FPGAwars/tools-oss-cad-suite/releases/download/v0.0.8/tools-oss-cad-suite-linux_x86_64-0.0.8.tar.gz</span><br><span class=\"line\">tar -xzvf tools-oss-cad-suite-linux_x86_64-0.0.8.tar.gz</span><br><span class=\"line\">sudo cp -n * /bin/</span><br><span class=\"line\">sudo cp -n -r * /usr/</span><br></pre></td></tr></table></figure>\n\n<p>After this, you should be able to run <code>icesprog --help</code> to display the following:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">usage: /usr/libexec/icesprog [OPTION] [FILE]</span><br><span class=\"line\">             -w | --write                   write spi-flash or gpio                      </span><br><span class=\"line\">             -r | --read                    read  spi-flash or gpio                      </span><br><span class=\"line\">             -e | --erase                   erase spi-flash                              </span><br><span class=\"line\">             -p | --probe                   probe spi-flash                              </span><br><span class=\"line\">             -o | --offset                  spi-flash offset                  \t\t\t </span><br><span class=\"line\">             -l | --len                     len of write/read                            </span><br><span class=\"line\">             -g | --gpio                    icelink gpio write/read                      </span><br><span class=\"line\">             -m | --mode                    icelink gpio mode                            </span><br><span class=\"line\">             -j | --jtag-sel                jtag interface select (1 or 2)               </span><br><span class=\"line\">             -c | --clk-sel                 clk source select (1 to 4)                   </span><br><span class=\"line\">             -h | --help                    display help info                            </span><br><span class=\"line\"></span><br><span class=\"line\">             -- version 1.1b --</span><br></pre></td></tr></table></figure>\n<p>Hurrah!<br>Now, if you run <code>icesprog -r</code> it will error out, saying <code>iCELink open fail!</code></p>\n<p>If we look at the <a href=\"https://github.com/wuxx/icesugar-pro/issues\">iceSugar-Pro github issues page</a>, we get nothing.<br>But, if we look at the model before it, <a href=\"https://github.com/wuxx/icesugar/issues/44\">we do</a>!<br>This is on macos, but, macos is still unix based. Lets see if it fixes things…</p>\n<p>After this, we can compile our program.<br>Now we need to upload it.<br>To install the tools for this, simply run:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/ntfreak/openocd.git</span><br><span class=\"line\">cd openocd</span><br><span class=\"line\">git submodule init</span><br><span class=\"line\">git submodule update</span><br><span class=\"line\">./bootstrap</span><br><span class=\"line\">./configure --enable-cmsis-dap</span><br><span class=\"line\">make -j</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n<p>Then, by using the fancy pants “drag and drop” programming that this dev board supports, we can simply plug the board into our computer, and then drag and drop our compiled file.</p>\n<p>Next, lets make our first program.<br>I’ll be using verilog as it’s a more gentle learning curve</p>\n<p>To program our fpga, we use 2 files:</p>\n<ul>\n<li>The .v file, this contains our “code” we want to execute </li>\n<li>The .lpf file, this contains our definitions for what pins do what, for example, saying that <code>led_o</code> is actually pin B11.</li>\n</ul>\n<p>So, lets go over our v file first:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module <span class=\"title function_\">blink</span> <span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">    input      clk_i, <span class=\"comment\">// our input clock signal for keeping time, this is defined in our lpf file, it&#x27;s 25MHz</span></span></span><br><span class=\"line\"><span class=\"params\">    output reg led_o  <span class=\"comment\">// Our output for our led, reg is the only type we can use for outputs, and is similar in concept to a flipflop</span></span></span><br><span class=\"line\"><span class=\"params\">)</span>;</span><br><span class=\"line\">localparam MAX = <span class=\"number\">2</span>_500_000;</span><br><span class=\"line\">localparam WIDTH = $clog2(MAX);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Initialise 2 variables as wires, think of these as point a to point b connections, kind of like a literal copper wire</span></span><br><span class=\"line\">wire rst_s;</span><br><span class=\"line\">wire clk_s;</span><br><span class=\"line\"></span><br><span class=\"line\">assign clk_s = clk_i; <span class=\"comment\">// We are taking our input (clk_i) and giving it&#x27;s value to clk_s</span></span><br><span class=\"line\"><span class=\"comment\">//pll_12_16 pll_inst (.clki(clk_i), .clko(clk_s), .rst(rst_s));</span></span><br><span class=\"line\">rst_gen <span class=\"title function_\">rst_inst</span> <span class=\"params\">(.clk_i(clk_s), .rst_i(<span class=\"number\">1&#x27;b</span>0), .rst_o(rst_s))</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">reg  [WIDTH<span class=\"number\">-1</span>:<span class=\"number\">0</span>] cpt_s;</span><br><span class=\"line\">wire [WIDTH<span class=\"number\">-1</span>:<span class=\"number\">0</span>] cpt_next_s = cpt_s + <span class=\"number\">1&#x27;b</span>1;</span><br><span class=\"line\"></span><br><span class=\"line\">wire             end_s = cpt_s == MAX<span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">always @(posedge clk_s) begin</span><br><span class=\"line\">    cpt_s &lt;= (rst_s || end_s) ? &#123;WIDTH&#123;<span class=\"number\">1&#x27;b</span>0&#125;&#125; : cpt_next_s;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rst_s) </span><br><span class=\"line\">        led_o &lt;= <span class=\"number\">1&#x27;b</span>0;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (end_s)</span><br><span class=\"line\">        led_o &lt;= ~led_o; <span class=\"comment\">// Invert the current value of led_o</span></span><br><span class=\"line\">end</span><br><span class=\"line\">endmodule</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Next, lets cover our lpf file:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">LOCATE COMP <span class=\"string\">&quot;clk_i&quot;</span> SITE <span class=\"string\">&quot;P6&quot;</span>; <span class=\"comment\">// As per the documentation, this pin gets our on-board oscillator!</span></span><br><span class=\"line\">IOBUF PORT <span class=\"string\">&quot;clk_i&quot;</span> IO_TYPE=LVCMOS33;</span><br><span class=\"line\">FREQUENCY PORT <span class=\"string\">&quot;clk_i&quot;</span> <span class=\"number\">25</span> MHZ; <span class=\"comment\">// We have 25MHz, so make sure the compiler knows that</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Uncomment the following for various led colors, detailed on the front page of the fpga documentaion</span></span><br><span class=\"line\"><span class=\"comment\">//LOCATE COMP &quot;led_o&quot; SITE &quot;A11&quot;;</span></span><br><span class=\"line\">LOCATE COMP <span class=\"string\">&quot;led_o&quot;</span> SITE <span class=\"string\">&quot;B11&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">//LOCATE COMP &quot;led_o&quot; SITE &quot;A12&quot;;</span></span><br><span class=\"line\"></span><br><span class=\"line\">IOBUF PORT <span class=\"string\">&quot;led_o&quot;</span> IO_TYPE=LVCMOS25;</span><br></pre></td></tr></table></figure>\n\n<p>To upload this, we drag and drop our 2 output files from compiling into the emulated usb storage device.<br>The current LED blinking program should halt (the large white body rgb led blinking Green), and then a small red led near the usb port should flash, that means that our program is now getting put into the flash memory of the board, meaning it will persist on our next reboot.</p>\n<p>After this, simply hit the reset button (in the middle of the rgb led and usb-c port), and tada!</p>\n<h1 id=\"IMPORTANT-NOTE\"><a href=\"#IMPORTANT-NOTE\" class=\"headerlink\" title=\"IMPORTANT NOTE\"></a>IMPORTANT NOTE</h1><h2 id=\"TO-PROGRAM-DO-NOT-USE-THE-USB-C-PROVIDED-IN-THE-BREAKOUT-GREEN-BOARD-AS-THIS-WILL-NOT-UPLOAD-OUR-FILES-AND-ERROR-OUT-SILENTLY\"><a href=\"#TO-PROGRAM-DO-NOT-USE-THE-USB-C-PROVIDED-IN-THE-BREAKOUT-GREEN-BOARD-AS-THIS-WILL-NOT-UPLOAD-OUR-FILES-AND-ERROR-OUT-SILENTLY\" class=\"headerlink\" title=\"TO PROGRAM, DO NOT USE THE USB-C PROVIDED IN THE BREAKOUT (GREEN) BOARD, AS THIS WILL NOT UPLOAD OUR FILES AND ERROR OUT SILENTLY\"></a>TO PROGRAM, DO NOT USE THE USB-C PROVIDED IN THE BREAKOUT (GREEN) BOARD, AS THIS WILL NOT UPLOAD OUR FILES AND ERROR OUT SILENTLY</h2><h2 id=\"INSTEAD-UNPLUG-THE-ENTIRE-MODULE-FROM-THE-BREAKOUT-BOARD-AND-CONNECT-YOUR-USB-CABLE-TO-THE-PORT-ON-THAT\"><a href=\"#INSTEAD-UNPLUG-THE-ENTIRE-MODULE-FROM-THE-BREAKOUT-BOARD-AND-CONNECT-YOUR-USB-CABLE-TO-THE-PORT-ON-THAT\" class=\"headerlink\" title=\"INSTEAD, UNPLUG THE ENTIRE MODULE FROM THE BREAKOUT BOARD, AND CONNECT YOUR USB CABLE TO THE PORT ON THAT.\"></a>INSTEAD, UNPLUG THE ENTIRE MODULE FROM THE BREAKOUT BOARD, AND CONNECT YOUR USB CABLE TO THE PORT ON THAT.</h2><p>Now as a fun exercise for the reader, try adjusting the speed of the blinking LED.<br>For the sake of being able to replicate things; I’ll include my makefile, basically ripped of the documentation, minus a small inconvenience:</p>\n<figure class=\"highlight make\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TARGET=blink_slow</span><br><span class=\"line\">TOP=blink_slow</span><br><span class=\"line\"></span><br><span class=\"line\">OBJS+=blink.v rst_gen.v</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">all: $&#123;TARGET&#125;.bit</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$(TARGET)</span>.json: <span class=\"variable\">$(OBJS)</span></span><br><span class=\"line\">    yosys -p <span class=\"string\">&quot;synth_ecp5 -json <span class=\"variable\">$@</span>&quot;</span> <span class=\"variable\">$(OBJS)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$(TARGET)</span>_out.config: <span class=\"variable\">$(TARGET)</span>.json</span><br><span class=\"line\">    nextpnr-ecp5 --25k --package CABGA256 --speed 6 --json <span class=\"variable\">$&lt;</span> --textcfg <span class=\"variable\">$@</span> --lpf <span class=\"variable\">$(TARGET)</span>.lpf --freq 65</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$(TARGET)</span>.bit: out.config</span><br><span class=\"line\">    ecppack --svf $&#123;TARGET&#125;.svf <span class=\"variable\">$&lt;</span> <span class=\"variable\">$@</span></span><br><span class=\"line\"></span><br><span class=\"line\">$&#123;TARGET&#125;.svf : $&#123;TARGET&#125;.bit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">prog: $&#123;TARGET&#125;.svf</span></span><br><span class=\"line\">    openFPGALoader -c digilent_hs2 <span class=\"variable\">$(TARGET)</span>.bit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">clean:</span></span><br><span class=\"line\">    rm -f *.svf *.bit *.ys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\"><span class=\"keyword\">.PHONY</span>: prog clean</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>And my config file (which i have named <code>out.config</code>) is straight from the github page <a href=\"https://raw.githubusercontent.com/wuxx/icesugar-pro/master/src/blink/blink_out.config\">here</a>.</p>\n<p>I’m planning another project involving this fpga, one thats more challenging than anything i’ve really ever programmed, so hopefully that goes well!</p>\n<p>See ya round - GhostDog</p>\n"},{"title":"AHM health insurance hacked!","date":"2022-10-20T22:49:47.000Z","_content":"In a new twist, AHM, one of the largest health providers in australia, has apparently been hacked!\nIn an email sent out to customers this morning, they updated us on a situation where hackers compromised information stored by AHM.\nThe effected information is supposedly the following:\n> First and last names\n> Addresses\n> Date of birth\n> Medicare Numbers\n> Policy Numbers\n> Phone Numbers\n> \"Some\" claims data\n\nAHM also included in the email that they are currently verifying the other supposedly leaked information, including \"data related to credit card security\", an extremely vauge wording, probably on purpose.\n\nThis, coming off the back of the infamous Optus hack, shows just how vulnerable even large players in the market are to cyberattacks, and how much it can effect them.\nOf particular concern, is the fact that this information is more than enough to take out things like a payday loan, or other financial credit, possibly opening up the field to indentify theft. \nIt will be interesting to see further development with this, and if this attack is as \"\"\"sophisticated\"\"\" as the Optus hack (that being, that they just left the back door open)\n\nThis doesn't look good for AHM, but i'll keep this blog updated with information. \n\nP.S: Here are the direct emails for anyone interested!\n![First email](/images/IMG_UPDATE_AHM.jpeg)\n![Second email](/images/IMG_UPDATE_2_AHM.jpeg)\n","source":"_posts/AHM-health-insurance-hacked.md","raw":"---\ntitle: AHM health insurance hacked!\ndate: 2022-10-21 09:49:47\ntags:\n---\nIn a new twist, AHM, one of the largest health providers in australia, has apparently been hacked!\nIn an email sent out to customers this morning, they updated us on a situation where hackers compromised information stored by AHM.\nThe effected information is supposedly the following:\n> First and last names\n> Addresses\n> Date of birth\n> Medicare Numbers\n> Policy Numbers\n> Phone Numbers\n> \"Some\" claims data\n\nAHM also included in the email that they are currently verifying the other supposedly leaked information, including \"data related to credit card security\", an extremely vauge wording, probably on purpose.\n\nThis, coming off the back of the infamous Optus hack, shows just how vulnerable even large players in the market are to cyberattacks, and how much it can effect them.\nOf particular concern, is the fact that this information is more than enough to take out things like a payday loan, or other financial credit, possibly opening up the field to indentify theft. \nIt will be interesting to see further development with this, and if this attack is as \"\"\"sophisticated\"\"\" as the Optus hack (that being, that they just left the back door open)\n\nThis doesn't look good for AHM, but i'll keep this blog updated with information. \n\nP.S: Here are the direct emails for anyone interested!\n![First email](/images/IMG_UPDATE_AHM.jpeg)\n![Second email](/images/IMG_UPDATE_2_AHM.jpeg)\n","slug":"AHM-health-insurance-hacked","published":1,"updated":"2022-10-20T23:18:08.986Z","_id":"cl9ho3qul00005mkg6nbp2jhj","comments":1,"layout":"post","photos":[],"link":"","content":"<p>In a new twist, AHM, one of the largest health providers in australia, has apparently been hacked!<br>In an email sent out to customers this morning, they updated us on a situation where hackers compromised information stored by AHM.<br>The effected information is supposedly the following:</p>\n<blockquote>\n<p>First and last names<br>Addresses<br>Date of birth<br>Medicare Numbers<br>Policy Numbers<br>Phone Numbers<br>“Some” claims data</p>\n</blockquote>\n<p>AHM also included in the email that they are currently verifying the other supposedly leaked information, including “data related to credit card security”, an extremely vauge wording, probably on purpose.</p>\n<p>This, coming off the back of the infamous Optus hack, shows just how vulnerable even large players in the market are to cyberattacks, and how much it can effect them.<br>Of particular concern, is the fact that this information is more than enough to take out things like a payday loan, or other financial credit, possibly opening up the field to indentify theft.<br>It will be interesting to see further development with this, and if this attack is as “””sophisticated””” as the Optus hack (that being, that they just left the back door open)</p>\n<p>This doesn’t look good for AHM, but i’ll keep this blog updated with information. </p>\n<p>P.S: Here are the direct emails for anyone interested!<br><img src=\"/blog/images/IMG_UPDATE_AHM.jpeg\" alt=\"First email\"><br><img src=\"/blog/images/IMG_UPDATE_2_AHM.jpeg\" alt=\"Second email\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>In a new twist, AHM, one of the largest health providers in australia, has apparently been hacked!<br>In an email sent out to customers this morning, they updated us on a situation where hackers compromised information stored by AHM.<br>The effected information is supposedly the following:</p>\n<blockquote>\n<p>First and last names<br>Addresses<br>Date of birth<br>Medicare Numbers<br>Policy Numbers<br>Phone Numbers<br>“Some” claims data</p>\n</blockquote>\n<p>AHM also included in the email that they are currently verifying the other supposedly leaked information, including “data related to credit card security”, an extremely vauge wording, probably on purpose.</p>\n<p>This, coming off the back of the infamous Optus hack, shows just how vulnerable even large players in the market are to cyberattacks, and how much it can effect them.<br>Of particular concern, is the fact that this information is more than enough to take out things like a payday loan, or other financial credit, possibly opening up the field to indentify theft.<br>It will be interesting to see further development with this, and if this attack is as “””sophisticated””” as the Optus hack (that being, that they just left the back door open)</p>\n<p>This doesn’t look good for AHM, but i’ll keep this blog updated with information. </p>\n<p>P.S: Here are the direct emails for anyone interested!<br><img src=\"/blog/images/IMG_UPDATE_AHM.jpeg\" alt=\"First email\"><br><img src=\"/blog/images/IMG_UPDATE_2_AHM.jpeg\" alt=\"Second email\"></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cl6eduwj80003ookg5on90xin","category_id":"cl6eduwj90005ookg8fchafo1","_id":"cl6eduwjf000gookg57cp16u8"},{"post_id":"cl6eduwj90004ookg6crreprr","category_id":"cl6eduwj90005ookg8fchafo1","_id":"cl6eduwjh000kookgh129disb"}],"PostTag":[{"post_id":"cl6eduwj00000ookgdo4w39s1","tag_id":"cl6eduwj70002ookgb30897ve","_id":"cl6eduwjb0008ookg61xq5gh9"},{"post_id":"cl6eduwj50001ookgbhs5dpp7","tag_id":"cl6eduwjb0007ookg3g07bhg4","_id":"cl6eduwje000dookg38z90y9o"},{"post_id":"cl6eduwjc000aookgft0ufku8","tag_id":"cl6eduwje000eookg5r5e1p41","_id":"cl6eduwjh000lookgcieker4m"},{"post_id":"cl6eduwje000cookg5e2yacv5","tag_id":"cl6eduwjh000jookg8yd9c8op","_id":"cl6eduwji000nookgbmgd2h8e"},{"post_id":"cl6eduwjg000hookg3csi34wq","tag_id":"cl6eduwjh000mookg4v1g9yy8","_id":"cl6eduwji000pookg7i601qkm"},{"post_id":"cl6eduwjg000iookgg411353z","tag_id":"cl6eduwji000oookg5ybkheos","_id":"cl6eduwji000qookg38bs5nis"},{"post_id":"cl6ivpi5m0000lxp7griedri0","tag_id":"cl6ivpi5s0002lxp70rtp9038","_id":"cl6ivpi5x0004lxp7ghpngx9g"},{"post_id":"cl6ivpi5q0001lxp7h3hf0k14","tag_id":"cl6ivpi5x0003lxp740in261j","_id":"cl6ivpi5y0005lxp77a3nc9uj"}],"Tag":[{"name":"bash, macos, macosx","_id":"cl6eduwj70002ookgb30897ve"},{"name":"excel, microsoft excel, spreadsheet, data science, data, automation, database, base","_id":"cl6eduwjb0007ookg3g07bhg4"},{"name":"circuit, electronics,","_id":"cl6eduwje000eookg5r5e1p41"},{"name":"bash, MacOS, Anaconda, Conda, Python, Linux","_id":"cl6eduwjh000jookg8yd9c8op"},{"name":"COVID-19, coronavirus","_id":"cl6eduwjh000mookg4v1g9yy8"},{"name":"security, cybersecurity, Virgin Media, Virgin, password, plaintext, password","_id":"cl6eduwji000oookg5ybkheos"},{"name":"scripting, bash, powershell, cmd, cli","_id":"cl6ivpi5s0002lxp70rtp9038"},{"name":"FPGA, programming, icelink","_id":"cl6ivpi5x0003lxp740in261j"}]}}