{"id":7,"date":"2022-07-19T01:59:33","date_gmt":"2022-07-19T01:59:33","guid":{"rendered":"http:\/\/localhost:8888\/wordpress\/?page_id=2"},"modified":"2022-07-19T01:59:33","modified_gmt":"2022-07-19T01:59:33","slug":"sample-page-2","status":"publish","type":"page","link":"https:\/\/recurrent-minimums.000webhostapp.com\/?page_id=7","title":{"rendered":"Data Collection Methods"},"content":{"rendered":"\n<h2>Building of sensor<\/h2>\n\n\n\n<p>For my specific question, I needed to gather my own primary data. To do this, a sensor was built. Challenges to this included economic and time constraints (intensified by shipping delays after ordering).&nbsp;<\/p>\n\n\n\n<p>The sensors needed to be soldered together as they came as a set of parts.<\/p>\n\n\n\n<figure class=\"wp-container-2 wp-block-gallery-1 wp-block-gallery has-nested-images columns-default is-cropped\">\n<figure class=\"wp-block-image size-large\"><img data-id=\"278\"  src=\"http:\/\/localhost:8888\/wordpress\/wp-content\/uploads\/2022\/07\/Picture-1-2.png\" alt=\"\" class=\"wp-image-278\"\/><\/figure>\n\n\n\n<figure class=\"wp-block-image size-large\"><img data-id=\"279\"  src=\"http:\/\/localhost:8888\/wordpress\/wp-content\/uploads\/2022\/07\/Picture-2.png\" alt=\"\" class=\"wp-image-279\"\/><\/figure>\n<\/figure>\n\n\n\n<p>I then made a new Arduino sketch after soldering them up, then wired one up using an Arduino (see photo). I uploaded their baseline sketch:<a href=\"https:\/\/wiki.dfrobot.com\/CCS811_Air_Quality_Sensor_SKU_SEN0339\"> https:\/\/wiki.dfrobot.com\/CCS811_Air_Quality_Sensor_SKU_SEN0339<\/a><\/p>\n\n\n\n<p>This output is for determining the baseline of the sensor, as per the datasheet from DFRobot.<\/p>\n\n\n\n<figure class=\"wp-block-image size-medium\"><img src=\"http:\/\/localhost:8888\/wordpress\/wp-content\/uploads\/2022\/07\/Picture-3-165x300.png\" alt=\"\" class=\"wp-image-280\"\/><\/figure>\n\n\n\n<pre class=\"wp-block-code\"><code>13:00:08.847 -&gt; \u2e2e\u2e2e\u2e2e\u2e2e\u2e2e\u2e2e\u2e2e\u2e2e\u2e2eData is not ready!\n13:00:18.485 -&gt; CBCA\n13:00:19.489 -&gt; 7ECA\n13:00:20.487 -&gt; 3ECA\n13:00:21.503 -&gt; FEC9\n13:00:22.492 -&gt; C7C9\n13:00:23.524 -&gt; 97C9\n13:00:24.498 -&gt; 69C9\n13:00:25.506 -&gt; 42C9\n13:00:26.522 -&gt; 1FC9\n13:00:27.517 -&gt; FEC8\n13:00:28.518 -&gt; DAC8\n13:00:29.502 -&gt; B6C8\n13:00:30.524 -&gt; 99C8\n13:00:31.515 -&gt; 7AC8\n13:00:32.514 -&gt; 61C8\n13:00:33.519 -&gt; 4BC8\n13:00:34.510 -&gt; 32C8\n13:00:35.511 -&gt; 19C8\n13:00:36.534 -&gt; AC8\n13:00:37.532 -&gt; F2C7\n13:00:38.515 -&gt; DFC7\n13:00:39.523 -&gt; CFC7\n13:00:40.537 -&gt; BAC7\n13:00:41.522 -&gt; ABC7\n13:00:42.536 -&gt; 96C7\n13:00:43.555 -&gt; 86C7\n13:00:44.535 -&gt; 79C7\n13:00:45.526 -&gt; 69C7\n13:00:46.543 -&gt; 59C7\n13:00:47.548 -&gt; 4AC7\n13:00:48.527 -&gt; 3FC7\n13:00:49.539 -&gt; 31C7\n13:00:50.532 -&gt; 22C7\n13:00:51.561 -&gt; 13C7\n13:00:52.535 -&gt; 9C7\n13:00:53.571 -&gt; 2C7\n13:00:54.545 -&gt; F3C6\n13:00:55.552 -&gt; E9C6\n13:00:56.543 -&gt; DFC6\n13:00:57.543 -&gt; D3C6\n13:00:58.576 -&gt; C9C6\n13:00:59.553 -&gt; C2C6\n13:01:00.557 -&gt; B3C6\n13:01:01.546 -&gt; ADC6\n13:01:02.558 -&gt; A1C6\n13:01:03.571 -&gt; 9AC6\n13:01:04.556 -&gt; 8EC6\n13:01:05.574 -&gt; 87C6\n13:01:06.578 -&gt; 7DC6\n13:01:07.558 -&gt; 73C6\n13:01:08.586 -&gt; 6DC6\n13:01:09.571 -&gt; 66C6\n13:01:10.586 -&gt; 5EC6\n13:01:11.582 -&gt; 52C6\n13:01:12.588 -&gt; 4FC6\n13:01:13.574 -&gt; 4AC6\n13:01:14.590 -&gt; 42C6\n13:01:15.574 -&gt; 37C6\n13:01:16.577 -&gt; 32C6\n13:01:17.580 -&gt; 2BC6\n13:01:18.598 -&gt; 79C5\n13:01:19.578 -&gt; 79C5\n13:01:20.585 -&gt; 79C5\n13:01:21.588 -&gt; 79C5\n13:01:22.584 -&gt; 79C5\n13:01:23.577 -&gt; 79C5\n13:01:24.588 -&gt; 79C5\n13:01:25.608 -&gt; 79C5\n13:01:26.605 -&gt; 79C5\n13:01:27.611 -&gt; 79C5\n13:01:28.589 -&gt; 79C5\n13:01:29.611 -&gt; 79C5\n<\/code><\/pre>\n\n\n\n<p>After I record this data, I then upload the consistent 79C5 at the end of the log, as this is the sensor\u2019s individual baseline. I will have to record this for each sensor so it can accurately record its data.<\/p>\n\n\n\n<p>I then tested its functionality, by breathing into it for a short period at intermittent times.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>13:03:57.714 -&gt; CO2: 400ppm, TVOC: 0ppb\n13:03:58.703 -&gt; CO2: 402ppm, TVOC: 0ppb\n13:03:59.734 -&gt; CO2: 400ppm, TVOC: 0ppb\n13:04:00.737 -&gt; CO2: 400ppm, TVOC: 0ppb\n13:04:01.742 -&gt; CO2: 400ppm, TVOC: 0ppb\n13:04:02.751 -&gt; CO2: 405ppm, TVOC: 0ppb\n13:04:03.734 -&gt; CO2: 400ppm, TVOC: 0ppb\n13:04:04.743 -&gt; CO2: 400ppm, TVOC: 0ppb\n13:04:05.734 -&gt; CO2: 400ppm, TVOC: 0ppb\n13:04:06.732 -&gt; CO2: 424ppm, TVOC: 3ppb\n13:04:07.758 -&gt; CO2: 502ppm, TVOC: 15ppb\n13:04:08.749 -&gt; CO2: 400ppm, TVOC: 0ppb\n13:04:09.777 -&gt; CO2: 400ppm, TVOC: 0ppb\n13:04:10.765 -&gt; CO2: 400ppm, TVOC: 0ppb\n13:04:11.777 -&gt; CO2: 400ppm, TVOC: 0ppb\n13:04:12.758 -&gt; CO2: 643ppm, TVOC: 37ppb\n13:04:13.767 -&gt; CO2: 435ppm, TVOC: 5ppb\n13:04:14.765 -&gt; CO2: 400ppm, TVOC: 0ppb\n13:04:15.767 -&gt; CO2: 400ppm, TVOC: 0ppb\n13:04:16.795 -&gt; CO2: 400ppm, TVOC: 0ppb\n13:04:17.800 -&gt; CO2: 400ppm, TVOC: 0ppb\n13:04:18.810 -&gt; CO2: 400ppm, TVOC: 0ppb\n13:04:19.799 -&gt; CO2: 400ppm, TVOC: 0ppb\n13:04:20.815 -&gt; CO2: 403ppm, TVOC: 0ppb\n13:04:21.818 -&gt; CO2: 400ppm, TVOC: 0ppb\n13:04:22.793 -&gt; CO2: 400ppm, TVOC: 0ppb\n<\/code><\/pre>\n\n\n\n<p>The peaks in both CO2 and TVOC seen in the data above (highlighted) align with when I exhaled into it. My breath increases both of these readings as CO2 and VOC are released when we exhale.&nbsp;<\/p>\n\n\n\n<p>I then discovered you can change the report and heat frequency, so I changed this to 60 seconds, saving a large amount of power and ensuring I can run the collection for up to 2 days before needing to replace batteries.<\/p>\n\n\n\n<p>The line to enable it is:<\/p>\n\n\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CCS811.setMeasurementMode(CCS811.eCycle_60s, 0, 0);<\/p>\n\n\n\n<p>The power consumption when measured using a multimeter, showed a total of 4.6 to 4.8 milliamps consumption.<\/p>\n\n\n\n<p>To further compress the numbers (allowing for better storage), I\u2019ve also come up with a method to compress repeating numbers, planned out with the below pseudocode:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>data = \"16490427478192F1187F\"\n \ndictionary = {\n\t\"00\": \"A\",\n\t\"11\": \"B\",\n\t\"22\": \"C\",\n\t\"33\": \"D\",\n\t\"44\": \"E\"\n\t}\n \nFor every key in dictionary:\n\tif key is in data:\n    \treplace the key with it\u2019s value\n<\/code><\/pre>\n\n\n\n<p>This overall leads to a large amount of compression.<\/p>\n\n\n\n<p>Next, I needed to consider my method for storing the data I am collecting. This is largely impacted by both financial constraints (as it would be easy to simply use a 64gb SD card for every collector, but that is outside of financial viability) and by time constraints (what I can solder and code up).<\/p>\n\n\n\n<p>For the sensor that will be placed near my house (with a Wi-Fi signal), I can send the data over emails every hour. This is not only a way of backing up this data (as the email is stored on Google servers) it\u2019s also a way of communicating the data to my computer.<\/p>\n\n\n\n<p>The first thing I did was source a resource (Santos, 2022) on sending emails with the esp8266 chip which is a Wi-Fi enabled microcontroller.<\/p>\n\n\n\n<p>I edited this removing unnecessary parts and setting up an email application password with Google, then merged this with my existing code for reading the CO2 and VOC levels.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>void loop(){\nint counter = 0;\nif((CCS811.checkDataReady() == true){\n  counter = counter + 1;\n  String past_CO = String(CCS811.getCO2PPM());\n  String past_VOC = String(CCS811.getTVOCPPB());\n}\nif(counter &gt;= 60){ \/\/ It's our measurement time!!!\n \n  String textMsg = past_CO + \",\" + past_VOC;\n \n  if (!smtp.connect(&amp;session))\n  \treturn;\n \n\t\/\/ Start sending Email and close the session\n\tif (!MailClient.sendMail(&amp;smtp, &amp;message))\n  \tSerial.println(\"Error sending Email, \" + smtp.errorReason());\n counter = 0;\n}\n}\n<\/code><\/pre>\n\n\n\n<p>The above code checks when the sensor is ready to be read (which is every 60 seconds). It then increments a counter, and stores the VOC and CO2 in a variable. If the counter is more than or equal to 60, it then sends the most recent data to my email. After sending, it resets the counter to 0 and repeats.<\/p>\n\n\n\n<p>The total code amounts to roughly 190 lines of code.<\/p>\n\n\n\n<h2><a>Data collection and summary<\/a><\/h2>\n\n\n\n<p>The locations I chose to set up the sensors are dispersed along &lt;REDACTED STREET&gt; which runs directly perpendicular to the Mornington Peninsula Freeway.&nbsp;<\/p>\n\n\n\n<p>Sensor 1: Positioned 30mt from MP Freeway<\/p>\n\n\n\n<p>Sensor 2: Positioned 330mt from freeway (my house)<\/p>\n\n\n\n<p>Sensor 3: Planned 500mt from freeway (a friends house &#8211; this location was eventually not used due to broken sensor parts)<\/p>\n\n\n\n<p>Sensor 4: Positioned 800mt from the freeway (walking path in wetlands).<\/p>\n\n\n\n<p>For the location near my house (my front yard), I used an internet-connected wireless microcontroller to automatically send the data over an internet messaging service at the end of each minute, allowing for remote collection. For the walking path, I saved the data to an EEPROM.<\/p>\n\n\n\n<p>I used a custom-made SD card adaptor for the wetlands and freeway sensors, as a SD card uses the I2C protocol, allowing for easy recording of data for an extended period of time. I walked to both of these sensors, took out the SD card and manually read that onto my phone or computer every 2 days for backup.&nbsp;<\/p>\n\n\n\n<p>During the process of data collection, there were multiple unexpected challenges. Firstly, prior to collecting data, out of the 4 sensors that I ordered and received, 1 arrived broken. Given time constraints I was unable to order a new one. For this reason, I had to omit one of the sensor locations. I chose to omit the sensor at 500m distance from the freeway.&nbsp;<\/p>\n\n\n\n<p>Additionally, during the data collection period one of the sensors was seized by the Victorian Police bomb squad, as it was suspected to be a possible IED (Improvised Explosive Device). Fortunately, after investigations, it was deemed to be safe enough to simply unplug and store for investigation and was thus not blown up.<\/p>\n\n\n\n<p>Upon seeing it was missing from the location, I enquired and found that it had been seized. I was then able to go to the police station and retrieve the sensor from an evidence satchel, after presenting documentation that it was indeed my device (such as images of the construction and documentation).<\/p>\n\n\n\n<p>&lt;IMAGE WITHHELD FOR PRIVACY&gt;<\/p>\n\n\n\n<p>After this, with coordination and cooperation from the Senior Constable at Chelsea Police Station, we agreed upon emailing them the location and images of the sensor in location, as well as clearly marking the sensors to avoid a repeat incident in the future. Despite the delay, this only resulted in approximately one day of no data collection which did not have a significant impact on the results.&nbsp;<\/p>\n\n\n\n<p class=\"has-large-font-size\">Source code and schematics for the Arduino can be provided upon request<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Building of sensor For my specific question, I needed to gather my own primary data. To do this, a sensor was built. Challenges to this included economic and time constraints (intensified by shipping delays after ordering).&nbsp; The sensors needed to be soldered together as they came as a set of parts. I then made a [&hellip;]<\/p>\n","protected":false},"author":2,"featured_media":0,"parent":0,"menu_order":0,"comment_status":"closed","ping_status":"open","template":"","meta":{"_mi_skip_tracking":false},"_links":{"self":[{"href":"https:\/\/recurrent-minimums.000webhostapp.com\/index.php?rest_route=\/wp\/v2\/pages\/7"}],"collection":[{"href":"https:\/\/recurrent-minimums.000webhostapp.com\/index.php?rest_route=\/wp\/v2\/pages"}],"about":[{"href":"https:\/\/recurrent-minimums.000webhostapp.com\/index.php?rest_route=\/wp\/v2\/types\/page"}],"author":[{"embeddable":true,"href":"https:\/\/recurrent-minimums.000webhostapp.com\/index.php?rest_route=\/wp\/v2\/users\/2"}],"replies":[{"embeddable":true,"href":"https:\/\/recurrent-minimums.000webhostapp.com\/index.php?rest_route=%2Fwp%2Fv2%2Fcomments&post=7"}],"version-history":[{"count":0,"href":"https:\/\/recurrent-minimums.000webhostapp.com\/index.php?rest_route=\/wp\/v2\/pages\/7\/revisions"}],"wp:attachment":[{"href":"https:\/\/recurrent-minimums.000webhostapp.com\/index.php?rest_route=%2Fwp%2Fv2%2Fmedia&parent=7"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}